{"title":"Targeted Distribution","markdown":{"headingText":"Targeted Distribution","headingAttr":{"id":"sec-target-distributions","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n<!-- In the terminal: -->\n<!-- quarto add leovan/quarto-pseudocode -->\n\n\n:::{.callout-note}\n\nIn this chapter, we provide some codes to simulate a dataset with a binary variable for which the underlying probability follows a targeted distribution. We consider here, as an example, that we would like the true probabilities to follow a Beta(2,2) distribution.\n\n:::\n\n\n\n:::{.callout-warning}\n\n## Code Availability\n\nThe functions used to subsample from a dataset so that the true probabilities in that subsample follows a target distribution are saved in the `functions/subsample_target_distrib.r`.\n\n:::\n\n```{r}\nlibrary(ks)\nlibrary(tidyverse)\n```\n\n## Algorithm\n\n\nIn our generated sample, $\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\{1,\\cdots,n\\}\\}$, let $\\widehat{f}$ denote the (empirical) density of scores. For the various scenarios, suppose that we want a specific distribution for the scores, denoted $g$ (uniform, Beta, etc.). A classical idea is to use ''rejection sampling'' techniques to create a subsample of the dataset. Set \n$$\nc = \\sup_{s\\in(0,1)} \\frac{\\widehat{f}(s)}{g(s)} \\leq \\infty.\n$$\nIf $c$ is finite, and not too large, we can use the standard rejection technique, described in @alg-cap-1. In a nutshell, point $i$ is kept with probability $(cg(s_i))^{-1}\\widehat{f}(s_i)$.\n\n\n\n\n```pseudocode\n#| label: alg-cap-1\n#| html-indent-size: \"1.2em\"\n#| html-comment-delimiter: \"//\"\n#| html-line-number: true\n#| html-line-number-punc: \":\"\n#| html-no-end: false\n#| pdf-placement: \"htb!\"\n#| pdf-line-number: true\n\n\\begin{algorithm}\n\\caption{Subsample a dataset so that the distribution of scores has density $g$ (Rejection, $c$ small)}\n\\begin{algorithmic}\n\\Require $\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\{1,\\cdots,n\\}\\}$ and $g$ (target density)\n\\State $\\mathcal{I} \\gets ,i\\in\\{1,\\cdots,n\\}$\n\\State $\\widehat{f} \\gets$ density of $\\{({s}_i),i\\in\\mathcal{I}\\}$, using Chen (1999)\n\\State $c = \\displaystyle\\sup_{s\\in(0,1)} \\frac{\\widehat{f}(s)}{g(s)} \\gets \\max_{i=1,\\cdots,n}\\displaystyle\\frac{\\widehat{f}(s_i)}{g(s_i)} $\n\\For{$i\\in\\{1,\\cdots,n\\}$}\n    \\State $U \\gets \\mathcal{U}([0,1])$\n    \\If{$\\displaystyle U > \\frac{\\widehat{f}(s_i)}{c\\,g(s_i)}$}\n        \\State $\\mathcal{I} \\gets \\mathcal{I}\\backslash\\{i\\}$ , i.e. ``reject\"\n\\EndIf \n\\EndFor\n\\State $s\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\mathcal{I}\\}$\n\\end{algorithmic}\n\\end{algorithm}\n```\n\nNote: the reference mentioned: @chen1999beta\n\nIf $c$ is too large, we use an iterative algorithm, described in @alg-cap-2, inspired by @rumbell2023novel (alternative options could be the ''Empirical Supremum Rejection Sampling'' introduced in @caffo2002empirical, for instance)\n\n\n```pseudocode\n#| label: alg-cap-2\n#| html-indent-size: \"1.2em\"\n#| html-comment-delimiter: \"//\"\n#| html-line-number: true\n#| html-line-number-punc: \":\"\n#| html-no-end: false\n#| pdf-placement: \"htb!\"\n#| pdf-line-number: true\n\n\\begin{algorithm}\n\\caption{Subsample a dataset so that the distribution of scores has density $g$ (Iterative Rejection, $c$ large)}\n\\begin{algorithmic}\n\\Require $\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\{1,\\cdots,n\\}\\}$, $\\epsilon>0$ and $g$ (target density)\n\\State $\\mathcal{I} \\gets \\{1,\\cdots,n\\}$\n\\State $\\widehat{f} \\gets$ density of $\\{({s}_i),i\\in\\mathcal{I}\\}$, using Chen (1999)\n\\State $d \\gets \\|\\widehat{F}-G\\|_{\\infty}$ (Kolmogorov-Smirnov distance)\n\\While{$d>\\epsilon$}\n\\State $\\mathcal{J} \\gets \\mathcal{I}$\n\\For{$i\\in\\mathcal{I}$}\n    \\State $U \\gets \\mathcal{U}([0,1])$\n    \\If{$\\displaystyle U>\\frac{\\widehat{f}(s_i)}{g(s_i)}$}\n        \\State $\\mathcal{J} \\gets \\mathcal{J}\\backslash\\{i\\}$ , i.e. 'reject' observation $i$\n    \\EndIf \n\\EndFor\n\\State $\\mathcal{I} \\gets \\mathcal{J}$\n\\State $\\widehat{f} \\gets$ density of $\\{({s}_i),i\\in\\mathcal{I}\\}$\n\\State $d \\gets \\|\\widehat{F}-G\\|_{\\infty}$ \n\\EndWhile\n\\State $s\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\mathcal{I}\\}$\n\\end{algorithmic}\n\\end{algorithm}  \n```\n\nTo implement this, we define the `subset_target()`{.R} function.\n\n```{r define-subset_target}\n#' @param data dataset\n#' @param score_name name of the column in data that contains the scores\n#' @param target_fun target distribution function.\n#' @param iter number of iterations.\n#' @param draw if TRUE (default) the distribution of scores (gray bars) and the\n#'  target distribution (in red) are plotted at each iteration.\n#' @seed if not `NULL`, seed to use\n#' @param data dataset\n#' @param probs_name name of the column in data that contains the observed\n#'  probabilities\n#' @param target_fun target distribution function.\n#' @param iter number of iterations.\n#' @param draw if TRUE (default) the distribution of scores (gray bars) and the\n#'  target distribution (in red) are plotted at each iteration.\n#' @seed if not `NULL`, seed to use\n#' @param verbose if `FALSE`, size of subsamplings at each iteration and KS test\n#'  results are hiddent\nsubset_target <- function(data,\n                          probs_name,\n                          target_fun = function(x) dbeta(x,2,2),\n                          iter = 1,\n                          draw = TRUE,\n                          seed = NULL,\n                          verbose = TRUE){\n  select <- rep(nrow(data),iter + 1)\n  if (!is.null(seed)) set.seed(seed)\n\n  # Get the scores from the dataset\n  probs_01 <- data |> pull(!!probs_name)\n  if (verbose == TRUE) cat(\"1) Size ...... \", nrow(data), \"\\n\", sep = \"\")\n\n  # Kolmogorov-Smirnov Test\n  fun <- Vectorize(function(x) integrate(target_fun, 0, x)$value)\n  K <- ks.test(probs_01, fun)\n\n  if (verbose) {\n    cat(\"1)  ks ............ \", K$statistic, \"\\n\", sep = \"\")\n    cat(\"1)  (pvalue) ...... \", K$p.value, \"\\n\", sep = \"\")\n  }\n\n  if (draw) {\n    # Histogram of scores (gray) and target distribution (red)\n    hist(probs_01,probability = TRUE, xlab = \"\", ylab = \"\", main = \"Initial\")\n    val_x <- seq(0,1,length = 601)\n    lines(val_x,target_fun(val_x), col = \"red\")\n  }\n\n  data_subset <- data\n\n  for (k in 1:iter) {\n    n <- nrow(data_subset)\n    initial_density <- kde(x = probs_01, eval.points = probs_01)\n    # Probability to include each observation in the current subset\n    prob_acceptation <- target_fun(probs_01) / initial_density$estimate\n    prob_acceptation <- pmin(prob_acceptation / max(prob_acceptation), 1)\n    # For each scores from the current data subset, decide whether or not to\n    # include it based on a random draw from a Ber(prob_acceptation)\n    index_acceptation <- rbinom(n, size = 1, prob = prob_acceptation)\n    # Use this index to keep only the selected data\n    data_subset <- data_subset[which(index_acceptation ==1 ), ]\n    select[k + 1] <- nrow(data_subset)\n    probs_01 <- data_subset |> pull(!!probs_name)\n    if (verbose == TRUE)\n      cat(k + 1, \") Size ...... \", nrow(data_subset), \"\\n\", sep = \"\")\n    # Kolmogorov-Smirnov Test\n    K <- ks.test(probs_01, fun)\n    if (verbose) {\n      cat(k + 1, \")   ks ............ \", K$statistic, \"\\n\", sep = \"\")\n      cat(k + 1, \")   (pvalue) ...... \", K$p.value, \"\\n\", sep = \"\")\n    }\n    if (draw) {\n      hist(\n        probs_01, probability = TRUE, xlab = \"\", ylab = \"\",\n        main = paste(\"Iteration \", k)\n      )\n      val_x <- seq(0, 1, length = 601)\n      lines(val_x, target_fun(val_x), col = \"red\")\n    }\n  }\n  data_subset\n}\n```\n\n## First Example\n\nLet us begin with generating some binary data, using a linear predictor for the true probability.\n```{r}\nn <- 1e5 # Number of obs.\n# Covariates\nx1 <- rnorm(n)\nx2 <- rnorm(n)\n# True probabilities\np <- function(x1, x2) .4 * x1 - .2*x2\n# Observed event\ny <- rnorm(n,p(x1, x2), .4)\ntb <- tibble(y = y, x1 = x1, x2 = x2)\n```\n\n\nLet us consider a linear model to predict the observed event:\n```{r}\nreg <- lm(y ~ x1 + x2, data = tb)\nscores <- predict(reg)\ntb$scores <- scores\n```\n\nKeeping only scores between 0 and 1 (would not need to do so for glm)\n\n```{r}\ntb_01 <- tb[(scores > 0) & (scores < 1), ]\ndata <- tb_01\n```\n\n\n```{r}\nB <- subset_target(data = data, probs_name = \"scores\", iter = 4)\n```\n\nLet us consider another example.\n\n```{r}\nlibrary(splines)\n```\n\n## Second Examplle\n\nWe generate another dataset.\n```{r}\nn <- 1e6\nx <- rbeta(n, 1, 2)\ny <- rbinom(n, size = 1, prob = x)\nbase <- tibble(\n  x = x,\n  y = y,\n  id = 1:n\n)\n```\n\nLet us assume that the scores are estimated using a logistic model.\n```{r}\nreg <- glm(y ~ bs(x), data = base, family = binomial)\nbase$scores <- predict(reg, type = \"response\")\n```\n\nLet us further assume that we want the scores to be distributed according to a Beta(2,1).\n```{r}\nB <- subset_target(\n  data = base, \n  probs_name = \"scores\", \n  iter = 1, \n  target_fun = function(x) dbeta(x,2,1)\n)\n```\n\nWe check the new observations:\n```{r}\nreg2 <- glm(y ~ bs(x), data = B, family = binomial)\n```\n\n```{r}\nval_x <- seq(0, 1, length = 601)\nplot(\n  val_x,\n  predict(reg, type = \"response\", newdata = data.frame(x = val_x)),\n  type = \"l\", lwd = 2\n)\nlines(\n  val_x,\n  predict(reg2, type = \"response\", newdata = data.frame(x = val_x)),\n  type = \"l\", lwd = 2, col = \"red\"\n)\n```\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["pseudocode"],"from":"markdown+emoji","highlight-style":"github","html-math-method":"mathjax","include-in-header":[{"file":"mathjax-color.html"}],"output-file":"target-distribution.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","bibliography":["biblio.bib"],"fig-cap-location":"top","editor":"source","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}