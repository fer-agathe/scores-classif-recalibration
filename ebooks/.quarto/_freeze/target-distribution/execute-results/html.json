{
  "hash": "8fabb2048c2f700a308866a1319db10b",
  "result": {
    "engine": "knitr",
    "markdown": "# Targeted Distribution {#sec-target-distributions}\n\n<!-- In the terminal: -->\n<!-- quarto add leovan/quarto-pseudocode -->\n\n\n:::{.callout-note}\n\nIn this chapter, we provide some codes to simulate a dataset with a binary variable for which the underlying probability follows a targeted distribution. We consider here, as an example, that we would like the true probabilities to follow a Beta(2,2) distribution.\n\n:::\n\n\n\n:::{.callout-warning}\n\n## Code Availability\n\nThe functions used to subsample from a dataset so that the true probabilities in that subsample follows a target distribution are saved in the `functions/subsample_target_distrib.r`.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ks)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n## Algorithm\n\n\nIn our generated sample, $\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\{1,\\cdots,n\\}\\}$, let $\\widehat{f}$ denote the (empirical) density of scores. For the various scenarios, suppose that we want a specific distribution for the scores, denoted $g$ (uniform, Beta, etc.). A classical idea is to use ''rejection sampling'' techniques to create a subsample of the dataset. Set \n$$\nc = \\sup_{s\\in(0,1)} \\frac{\\widehat{f}(s)}{g(s)} \\leq \\infty.\n$$\nIf $c$ is finite, and not too large, we can use the standard rejection technique, described in @alg-cap-1. In a nutshell, point $i$ is kept with probability $(cg(s_i))^{-1}\\widehat{f}(s_i)$.\n\n\n\n\n```pseudocode\n#| label: alg-cap-1\n#| html-indent-size: \"1.2em\"\n#| html-comment-delimiter: \"//\"\n#| html-line-number: true\n#| html-line-number-punc: \":\"\n#| html-no-end: false\n#| pdf-placement: \"htb!\"\n#| pdf-line-number: true\n\n\\begin{algorithm}\n\\caption{Subsample a dataset so that the distribution of scores has density $g$ (Rejection, $c$ small)}\n\\begin{algorithmic}\n\\Require $\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\{1,\\cdots,n\\}\\}$ and $g$ (target density)\n\\State $\\mathcal{I} \\gets ,i\\in\\{1,\\cdots,n\\}$\n\\State $\\widehat{f} \\gets$ density of $\\{({s}_i),i\\in\\mathcal{I}\\}$, using Chen (1999)\n\\State $c = \\displaystyle\\sup_{s\\in(0,1)} \\frac{\\widehat{f}(s)}{g(s)} \\gets \\max_{i=1,\\cdots,n}\\displaystyle\\frac{\\widehat{f}(s_i)}{g(s_i)} $\n\\For{$i\\in\\{1,\\cdots,n\\}$}\n    \\State $U \\gets \\mathcal{U}([0,1])$\n    \\If{$\\displaystyle U > \\frac{\\widehat{f}(s_i)}{c\\,g(s_i)}$}\n        \\State $\\mathcal{I} \\gets \\mathcal{I}\\backslash\\{i\\}$ , i.e. ``reject\"\n\\EndIf \n\\EndFor\n\\State $s\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\mathcal{I}\\}$\n\\end{algorithmic}\n\\end{algorithm}\n```\n\nNote: the reference mentioned: @chen1999beta\n\nIf $c$ is too large, we use an iterative algorithm, described in @alg-cap-2, inspired by @rumbell2023novel (alternative options could be the ''Empirical Supremum Rejection Sampling'' introduced in @caffo2002empirical, for instance)\n\n\n```pseudocode\n#| label: alg-cap-2\n#| html-indent-size: \"1.2em\"\n#| html-comment-delimiter: \"//\"\n#| html-line-number: true\n#| html-line-number-punc: \":\"\n#| html-no-end: false\n#| pdf-placement: \"htb!\"\n#| pdf-line-number: true\n\n\\begin{algorithm}\n\\caption{Subsample a dataset so that the distribution of scores has density $g$ (Iterative Rejection, $c$ large)}\n\\begin{algorithmic}\n\\Require $\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\{1,\\cdots,n\\}\\}$, $\\epsilon>0$ and $g$ (target density)\n\\State $\\mathcal{I} \\gets \\{1,\\cdots,n\\}$\n\\State $\\widehat{f} \\gets$ density of $\\{({s}_i),i\\in\\mathcal{I}\\}$, using Chen (1999)\n\\State $d \\gets \\|\\widehat{F}-G\\|_{\\infty}$ (Kolmogorov-Smirnov distance)\n\\While{$d>\\epsilon$}\n\\State $\\mathcal{J} \\gets \\mathcal{I}$\n\\For{$i\\in\\mathcal{I}$}\n    \\State $U \\gets \\mathcal{U}([0,1])$\n    \\If{$\\displaystyle U>\\frac{\\widehat{f}(s_i)}{g(s_i)}$}\n        \\State $\\mathcal{J} \\gets \\mathcal{J}\\backslash\\{i\\}$ , i.e. 'reject' observation $i$\n    \\EndIf \n\\EndFor\n\\State $\\mathcal{I} \\gets \\mathcal{J}$\n\\State $\\widehat{f} \\gets$ density of $\\{({s}_i),i\\in\\mathcal{I}\\}$\n\\State $d \\gets \\|\\widehat{F}-G\\|_{\\infty}$ \n\\EndWhile\n\\State $s\\mathcal{D}=\\{(\\boldsymbol{x}_i,y_i,{s}_i),i\\in\\mathcal{I}\\}$\n\\end{algorithmic}\n\\end{algorithm}  \n```\n\nTo implement this, we define the `subset_target()`{.R} function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' @param data dataset\n#' @param score_name name of the column in data that contains the scores\n#' @param target_fun target distribution function.\n#' @param iter number of iterations.\n#' @param draw if TRUE (default) the distribution of scores (gray bars) and the\n#'  target distribution (in red) are plotted at each iteration.\n#' @seed if not `NULL`, seed to use\n#' @param data dataset\n#' @param probs_name name of the column in data that contains the observed\n#'  probabilities\n#' @param target_fun target distribution function.\n#' @param iter number of iterations.\n#' @param draw if TRUE (default) the distribution of scores (gray bars) and the\n#'  target distribution (in red) are plotted at each iteration.\n#' @seed if not `NULL`, seed to use\n#' @param verbose if `FALSE`, size of subsamplings at each iteration and KS test\n#'  results are hiddent\nsubset_target <- function(data,\n                          probs_name,\n                          target_fun = function(x) dbeta(x,2,2),\n                          iter = 1,\n                          draw = TRUE,\n                          seed = NULL,\n                          verbose = TRUE){\n  select <- rep(nrow(data),iter + 1)\n  if (!is.null(seed)) set.seed(seed)\n\n  # Get the scores from the dataset\n  probs_01 <- data |> pull(!!probs_name)\n  if (verbose == TRUE) cat(\"1) Size ...... \", nrow(data), \"\\n\", sep = \"\")\n\n  # Kolmogorov-Smirnov Test\n  fun <- Vectorize(function(x) integrate(target_fun, 0, x)$value)\n  K <- ks.test(probs_01, fun)\n\n  if (verbose) {\n    cat(\"1)  ks ............ \", K$statistic, \"\\n\", sep = \"\")\n    cat(\"1)  (pvalue) ...... \", K$p.value, \"\\n\", sep = \"\")\n  }\n\n  if (draw) {\n    # Histogram of scores (gray) and target distribution (red)\n    hist(probs_01,probability = TRUE, xlab = \"\", ylab = \"\", main = \"Initial\")\n    val_x <- seq(0,1,length = 601)\n    lines(val_x,target_fun(val_x), col = \"red\")\n  }\n\n  data_subset <- data\n\n  for (k in 1:iter) {\n    n <- nrow(data_subset)\n    initial_density <- kde(x = probs_01, eval.points = probs_01)\n    # Probability to include each observation in the current subset\n    prob_acceptation <- target_fun(probs_01) / initial_density$estimate\n    prob_acceptation <- pmin(prob_acceptation / max(prob_acceptation), 1)\n    # For each scores from the current data subset, decide whether or not to\n    # include it based on a random draw from a Ber(prob_acceptation)\n    index_acceptation <- rbinom(n, size = 1, prob = prob_acceptation)\n    # Use this index to keep only the selected data\n    data_subset <- data_subset[which(index_acceptation ==1 ), ]\n    select[k + 1] <- nrow(data_subset)\n    probs_01 <- data_subset |> pull(!!probs_name)\n    if (verbose == TRUE)\n      cat(k + 1, \") Size ...... \", nrow(data_subset), \"\\n\", sep = \"\")\n    # Kolmogorov-Smirnov Test\n    K <- ks.test(probs_01, fun)\n    if (verbose) {\n      cat(k + 1, \")   ks ............ \", K$statistic, \"\\n\", sep = \"\")\n      cat(k + 1, \")   (pvalue) ...... \", K$p.value, \"\\n\", sep = \"\")\n    }\n    if (draw) {\n      hist(\n        probs_01, probability = TRUE, xlab = \"\", ylab = \"\",\n        main = paste(\"Iteration \", k)\n      )\n      val_x <- seq(0, 1, length = 601)\n      lines(val_x, target_fun(val_x), col = \"red\")\n    }\n  }\n  data_subset\n}\n```\n:::\n\n\n## First Example\n\nLet us begin with generating some binary data, using a linear predictor for the true probability.\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 1e5 # Number of obs.\n# Covariates\nx1 <- rnorm(n)\nx2 <- rnorm(n)\n# True probabilities\np <- function(x1, x2) .4 * x1 - .2*x2\n# Observed event\ny <- rnorm(n,p(x1, x2), .4)\ntb <- tibble(y = y, x1 = x1, x2 = x2)\n```\n:::\n\n\n\nLet us consider a linear model to predict the observed event:\n\n::: {.cell}\n\n```{.r .cell-code}\nreg <- lm(y ~ x1 + x2, data = tb)\nscores <- predict(reg)\ntb$scores <- scores\n```\n:::\n\n\nKeeping only scores between 0 and 1 (would not need to do so for glm)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb_01 <- tb[(scores > 0) & (scores < 1), ]\ndata <- tb_01\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nB <- subset_target(data = data, probs_name = \"scores\", iter = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1) Size ...... 48486\n1)  ks ............ 0.2997993\n1)  (pvalue) ...... 0\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](target-distribution_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2) Size ...... 17127\n2)   ks ............ 0.004201355\n2)   (pvalue) ...... 0.9229854\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](target-distribution_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3) Size ...... 16802\n3)   ks ............ 0.00263152\n3)   (pvalue) ...... 0.9998175\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](target-distribution_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n4) Size ...... 16252\n4)   ks ............ 0.002203808\n4)   (pvalue) ...... 0.9999985\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](target-distribution_files/figure-html/unnamed-chunk-5-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n5) Size ...... 15982\n5)   ks ............ 0.002392562\n5)   (pvalue) ...... 0.9999885\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](target-distribution_files/figure-html/unnamed-chunk-5-5.png){width=672}\n:::\n:::\n\n\nLet us consider another example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(splines)\n```\n:::\n\n\n## Second Examplle\n\nWe generate another dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 1e6\nx <- rbeta(n, 1, 2)\ny <- rbinom(n, size = 1, prob = x)\nbase <- tibble(\n  x = x,\n  y = y,\n  id = 1:n\n)\n```\n:::\n\n\nLet us assume that the scores are estimated using a logistic model.\n\n::: {.cell}\n\n```{.r .cell-code}\nreg <- glm(y ~ bs(x), data = base, family = binomial)\nbase$scores <- predict(reg, type = \"response\")\n```\n:::\n\n\nLet us further assume that we want the scores to be distributed according to a Beta(2,1).\n\n::: {.cell}\n\n```{.r .cell-code}\nB <- subset_target(\n  data = base, \n  probs_name = \"scores\", \n  iter = 1, \n  target_fun = function(x) dbeta(x,2,1)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1) Size ...... 1000000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in ks.test.default(probs_01, fun): ties should not be present for the\none-sample Kolmogorov-Smirnov test\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1)  ks ............ 0.502429\n1)  (pvalue) ...... 0\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](target-distribution_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n2) Size ...... 7433\n2)   ks ............ 0.05460928\n2)   (pvalue) ...... 1.115475e-19\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](target-distribution_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\n\nWe check the new observations:\n\n::: {.cell}\n\n```{.r .cell-code}\nreg2 <- glm(y ~ bs(x), data = B, family = binomial)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nval_x <- seq(0, 1, length = 601)\nplot(\n  val_x,\n  predict(reg, type = \"response\", newdata = data.frame(x = val_x)),\n  type = \"l\", lwd = 2\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in bs(x, degree = 3L, knots = numeric(0), Boundary.knots =\nc(1.13039405272881e-06, : some 'x' values beyond boundary knots may cause\nill-conditioned bases\n```\n\n\n:::\n\n```{.r .cell-code}\nlines(\n  val_x,\n  predict(reg2, type = \"response\", newdata = data.frame(x = val_x)),\n  type = \"l\", lwd = 2, col = \"red\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in bs(x, degree = 3L, knots = numeric(0), Boundary.knots =\nc(0.00521055325908034, : some 'x' values beyond boundary knots may cause\nill-conditioned bases\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](target-distribution_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "target-distribution_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}