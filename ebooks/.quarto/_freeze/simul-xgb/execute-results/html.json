{
  "hash": "badf7d752a05f1e6a8ef9f1789f042a4",
  "result": {
    "engine": "knitr",
    "markdown": "# Extreme Gradient Boosting {#sec-simul-xgb}\n\n\n:::{.callout-note}\n\nThis chapter investigates how the distribution of estimated scores by an extreme gradient boosting model evolves with the number of boosting iterations. In the models, we vary the maximum depth of trees and consider boosting iterations up to 400. For each configuration, we compute the predicted scores from iteration 1 to 400; for each boosting iteration, we use the predicted scores (on train, calibration and test sets) to compute various metrics (performance, calibration, divergence between the distribution of scores and that of true underlying probabilities) on both the initial and recalibrated scores.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggh4x)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'ggh4x'\n\nThe following object is masked from 'package:ggplot2':\n\n    guide_axis_logticks\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggrepel)\nlibrary(rpart)\nlibrary(locfit)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nlocfit 1.5-9.9 \t 2024-03-01\n\nAttaching package: 'locfit'\n\nThe following object is masked from 'package:purrr':\n\n    none\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(philentropy)\n\n# Colours for train/validation/test\ncolour_samples <- c(\n  \"Train\" = \"#0072B2\",\n  \"Validation\" = \"#009E73\",\n  \"Calibration\" = \"#CC79A7\",\n  \"Test\" = \"#D55E00\"\n)\n\ncolour_recalib <- c(\n  \"None\" = \"#88CCEE\",\n  \"Platt\" = \"#44AA99\",\n  \"Isotonic\" = \"#882255\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"definition of the `theme_paper()` function (for ggplot2 graphs)\"}\n#' Theme for ggplot2\n#'\n#' @param ... arguments passed to the theme function\n#' @export\n#' @importFrom ggplot2 element_rect element_text element_blank element_line unit\n#'   rel\ntheme_paper <- function (...) {\n  ggthemes::theme_base() +\n    theme(\n      plot.background = element_blank(),\n      legend.background = element_rect(\n        fill = \"transparent\", linetype=\"solid\", colour =\"black\"),\n      legend.position = \"bottom\",\n      legend.direction = \"horizontal\",\n      legend.box = \"horizontal\",\n      legend.key = element_blank()\n    )\n}\n```\n:::\n\n\n## Data\n\n\nWe generate data using the first 12 scenarios from @Ojeda_2023 and an additional set of 4 scenarios in which the true probability does not depend on the predictors in a linear way (see [Chapter -@sec-simul-data]).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"../scripts/functions/simul-data.R\")\nlibrary(ks)\nsource(\"../scripts/functions/subsample_target_distribution.R\")\n```\n:::\n\n\nWhen we simulate a dataset, we draw the following number of observations:\n\n::: {.cell}\n\n```{.r .cell-code}\nnb_obs <- 10000\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Definition of the 16 scenarios\"}\n# Coefficients beta\ncoefficients <- list(\n  # First category (baseline, 2 covariates)\n  c(0.5, 1),  # scenario 1, 0 noise variable\n  c(0.5, 1),  # scenario 2, 10 noise variables\n  c(0.5, 1),  # scenario 3, 50 noise variables\n  c(0.5, 1),  # scenario 4, 100 noise variables\n  # Second category (same as baseline, with lower number of 1s)\n  c(0.5, 1),  # scenario 5, 0 noise variable\n  c(0.5, 1),  # scenario 6, 10 noise variables\n  c(0.5, 1),  # scenario 7, 50 noise variables\n  c(0.5, 1),  # scenario 8, 100 noise variables\n  # Third category (same as baseline but with 5 num. and 5 categ. covariates)\n  c(0.1, 0.2, 0.3, 0.4, 0.5, 0.01, 0.02, 0.03, 0.04, 0.05),\n  c(0.1, 0.2, 0.3, 0.4, 0.5, 0.01, 0.02, 0.03, 0.04, 0.05),\n  c(0.1, 0.2, 0.3, 0.4, 0.5, 0.01, 0.02, 0.03, 0.04, 0.05),\n  c(0.1, 0.2, 0.3, 0.4, 0.5, 0.01, 0.02, 0.03, 0.04, 0.05),\n  # Fourth category (nonlinear predictor, 3 covariates)\n  c(0.5, 1, .3),  # scenario 5, 0 noise variable\n  c(0.5, 1, .3),  # scenario 6, 10 noise variables\n  c(0.5, 1, .3),  # scenario 7, 50 noise variables\n  c(0.5, 1, .3)  # scenario 8, 100 noise variables\n)\n\n# Mean parameter for the normal distribution to draw from to draw num covariates\nmean_num <- list(\n  # First category (baseline, 2 covariates)\n  rep(0, 2),  # scenario 1, 0 noise variable\n  rep(0, 2),  # scenario 2, 10 noise variables\n  rep(0, 2),  # scenario 3, 50 noise variables\n  rep(0, 2),  # scenario 4, 100 noise variables\n  # Second category (same as baseline, with lower number of 1s)\n  rep(0, 2),  # scenario 5, 0 noise variable\n  rep(0, 2),  # scenario 6, 10 noise variables\n  rep(0, 2),  # scenario 7, 50 noise variables\n  rep(0, 2),  # scenario 8, 100 noise variables\n  # Third category (same as baseline but with 5 num. and 5 categ. covariates)\n  rep(0, 5),\n  rep(0, 5),\n  rep(0, 5),\n  rep(0, 5),\n  # Fourth category (nonlinear predictor, 3 covariates)\n  rep(0, 3),\n  rep(0, 3),\n  rep(0, 3),\n  rep(0, 3)\n)\n# Sd parameter for the normal distribution to draw from to draw num covariates\nsd_num <- list(\n  # First category (baseline, 2 covariates)\n  rep(1, 2),  # scenario 1, 0 noise variable\n  rep(1, 2),  # scenario 2, 10 noise variables\n  rep(1, 2),  # scenario 3, 50 noise variables\n  rep(1, 2),  # scenario 4, 100 noise variables\n  # Second category (same as baseline, with lower number of 1s)\n  rep(1, 2),  # scenario 5, 0 noise variable\n  rep(1, 2),  # scenario 6, 10 noise variables\n  rep(1, 2),  # scenario 7, 50 noise variables\n  rep(1, 2),  # scenario 8, 100 noise variables\n  # Third category (same as baseline but with 5 num. and 5 categ. covariates)\n  rep(1, 5),\n  rep(1, 5),\n  rep(1, 5),\n  rep(1, 5),\n  # Fourth category (nonlinear predictor, 3 covariates)\n  rep(1, 3),\n  rep(1, 3),\n  rep(1, 3),\n  rep(1, 3)\n)\n\nparams_df <- tibble(\n  scenario = 1:16,\n  coefficients = coefficients,\n  n_num = c(rep(2, 8), rep(5, 4), rep(3, 4)),\n  add_categ = c(rep(FALSE, 8), rep(TRUE, 4), rep(FALSE, 4)),\n  n_noise = rep(c(0, 10, 50, 100), 4),\n  mean_num = mean_num,\n  sd_num = sd_num,\n  size_train = rep(nb_obs, 16),\n  size_valid = rep(nb_obs, 16),\n  size_calib = rep(nb_obs, 16),\n  size_test = rep(nb_obs, 16),\n  transform_probs = c(rep(FALSE, 4), rep(TRUE, 4), rep(FALSE, 4), rep(FALSE, 4)),\n  linear_predictor = c(rep(TRUE, 12), rep(FALSE, 4)),\n  seed = 202105\n)\nrm(coefficients, mean_num, sd_num)\n```\n:::\n\n\n## Metrics\n\nWe load the functions from [Chapter -@sec-metrics] to compute performance, calibration and divergence metrics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"../scripts/functions/metrics.R\")\n```\n:::\n\n\n## Simulations Setup\n\n\nTo train the models, we rely on the {xgboost} R package.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xgboost)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'xgboost'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    slice\n```\n\n\n:::\n:::\n\n\nHere, we define a function to recalibrate predicted scores using either Platt scaling or isotonic regression. The recalibration algorithm is first trained on the calibration set and then applied to both the calibration and test sets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Recalibrates scores using a calibration\n#' \n#' @param obs_calib vector of observed events in the calibration set\n#' @param scores_calib vector of predicted probabilities in the calibration set\n#' @param obs_test vector of observed events in the test set\n#' @param scores_test vector of predicted probabilities in the test set\n#' @param method recalibration method (`\"platt\"` for Platt scaling, \n#'   `\"isotonic\"` for isotonic regression)\n#' @returns list of two elements: recalibrated scores on the calibration set,\n#'   recalibrated scores on the test set\nrecalibrate <- function(obs_calib,\n                        obs_test,\n                        pred_calib,\n                        pred_test,\n                        method = c(\"platt\", \"isotonic\")) {\n  data_calib <- tibble(d = obs_calib, scores = pred_calib)\n  data_test <- tibble(d = obs_test, scores = pred_test)\n  \n  if (method == \"platt\") {\n    lr <- glm(d ~ scores, family = binomial(link = 'logit'), data = data_calib)\n    score_c_calib <- predict(lr, newdata = data_calib, type = \"response\")\n    score_c_test <- predict(lr, newdata = data_test, type = \"response\")\n  } else if (method == \"isotonic\") {\n    iso <- isoreg(x = data_calib$scores, y = data_calib$d)\n    fit_iso <- as.stepfun(iso)\n    score_c_calib <- fit_iso(data_calib$scores)\n    score_c_test <- fit_iso(data_test$scores)\n    \n  } else {\n    stop(\"Unrecognized method: platt or isotonic only\")\n  }\n  # Format results in tibbles:\n  # For calibration set\n  tb_score_c_calib <- tibble(\n    d = obs_calib,\n    p_u = pred_calib,\n    p_c = score_c_calib\n  )\n  # For test set\n  tb_score_c_test <- tibble(\n    d = obs_test,\n    p_u = pred_test,\n    p_c = score_c_test\n  )\n  \n  list(\n    tb_score_c_calib = tb_score_c_calib,\n    tb_score_c_test = tb_score_c_test\n  )\n  \n}\n```\n:::\n\n\n\nAs explained in the foreword of this page, we compute metrics based on scores obtained at various boosting iterations. To do so, we define a function, `get_metrics_nb_iter()`{.R}, that will be applied to a fitted model. This function will be called for all the boosting iterations (controlled by the `nb_iter` argument). The function returns a list with the following elements:\n\n- `scenario`: the ID of the scenario\n- `ind`: the index of the grid search (so that we can join with the hyperparameters values, if needed)\n- `repn`: the ID of the replication\n- `nb_iter`: the boosting iteration at which the metrics are computed\n- `tb_metrics`: the tibble with the performance, calibration, and divergence metrics (one row for the train sample, one row for the calibration sample, one row for the validation sample, and one row for the test sample)\n- `tb_prop_scores`: additional metrics ($\\mathbb{P}(q_1 < \\hat{s}(\\mathbf{x}) < q_2)$ for multiple values for $q_1$ and $q_2 = 1-q_1$)\n- `scores_hist`: elements to be able to plot an histogram of the scores on both the train set and the test set (using 20 equally-sized bins over $[0,1]$).\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Function `get_metrics_nb_iter()`{.R}\"}\n#' Computes the performance and calibration metrics for an xgb model,\n#' depending on the number of iterations kept.\n#'\n#' @param nb_iter number of boosting iterations to keep\n#' @param params hyperparameters of the current model\n#' @param fitted_xgb xgb estimated model\n#' @param tb_train_xgb train data (in xgb.DMatrix format)\n#' @param tb_valid_xgb validation data (in xgb.DMatrix format)\n#' @param tb_calib_xgb calibration data (in xgb.DMatrix format)\n#' @param tb_test_xgb test data (in xgb.DMatrix format)\n#' @param simu_data simulated dataset\n#' @param true_prob list with true probabilities on train, calibration,\n#'  validation and test sets\nget_metrics_nb_iter <- function(nb_iter,\n                                params,\n                                fitted_xgb,\n                                tb_train_xgb,\n                                tb_valid_xgb,\n                                tb_calib_xgb,\n                                tb_test_xgb,\n                                simu_data,\n                                true_prob) {\n\n  ind <- params$ind\n  max_depth <- params$max_depth\n  tb_train <- simu_data$data$train |> rename(d = y)\n  tb_valid <- simu_data$data$valid |> rename(d = y)\n  tb_calib <- simu_data$data$calib |> rename(d = y)\n  tb_test <- simu_data$data$test |> rename(d = y)\n\n  # Predicted scores\n  scores_train <- predict(fitted_xgb, tb_train_xgb, iterationrange = c(1, nb_iter))\n  scores_valid <- predict(fitted_xgb, tb_valid_xgb, iterationrange = c(1, nb_iter))\n  scores_calib <- predict(fitted_xgb, tb_calib_xgb, iterationrange = c(1, nb_iter))\n  scores_test <- predict(fitted_xgb, tb_test_xgb, iterationrange = c(1, nb_iter))\n  \n  # Recalibration\n  # Platt scaling\n  res_recalibration_platt <- recalibrate(\n    obs_calib = tb_calib$d, \n    obs_test = tb_test$d, \n    pred_calib = scores_calib, \n    pred_test = scores_test, \n    method = \"platt\"\n  )\n  scores_c_platt_calib <- res_recalibration_platt$tb_score_c_calib$p_c\n  scores_c_platt_test <- res_recalibration_platt$tb_score_c_test$p_c\n  \n  # Isotonic regression\n  res_recalibration_iso <- recalibrate(\n    obs_calib = tb_calib$d, \n    obs_test = tb_test$d, \n    pred_calib = scores_calib, \n    pred_test = scores_test, \n    method = \"isotonic\"\n  )\n  scores_c_iso_calib <- res_recalibration_iso$tb_score_c_calib$p_c\n  scores_c_iso_test <- res_recalibration_iso$tb_score_c_test$p_c\n\n  ## Histogram of scores----\n  breaks <- seq(0, 1, by = .05)\n  scores_train_hist <- hist(scores_train, breaks = breaks, plot = FALSE)\n  scores_calib_hist <- hist(scores_calib, breaks = breaks, plot = FALSE)\n  scores_valid_hist <- hist(scores_valid, breaks = breaks, plot = FALSE)\n  scores_test_hist <- hist(scores_test, breaks = breaks, plot = FALSE)\n  scores_c_platt_calib_hist <- hist(scores_c_platt_calib, breaks = breaks, plot = FALSE)\n  scores_c_platt_test_hist <- hist(scores_c_platt_test, breaks = breaks, plot = FALSE)\n  scores_c_iso_calib_hist <- hist(scores_c_iso_calib, breaks = breaks, plot = FALSE)\n  scores_c_iso_test_hist <- hist(scores_c_iso_test, breaks = breaks, plot = FALSE)\n  \n  scores_hist <- list(\n    train = scores_train_hist,\n    valid = scores_valid_hist,\n    calib = scores_calib_hist,\n    test = scores_test_hist,\n    calib_c_platt = scores_c_platt_calib_hist,\n    test_c_platt = scores_c_platt_test_hist,\n    calib_c_iso = scores_c_iso_calib_hist,\n    test_c_iso = scores_c_iso_test_hist,\n    scenario = simu_data$scenario,\n    ind = ind,\n    repn = simu_data$repn,\n    max_depth = params$max_depth,\n    nb_iter = nb_iter\n  )\n\n  ## Estimation of P(q1 < score < q2)----\n  prop_btw_q_h <- function(s, sample_name, recalib_name) {\n    map(\n      c(.1, .2, .3, .4),\n      ~prop_btw_quantiles(s = s, q1 = .x)\n    ) |>\n      list_rbind() |>\n      mutate(sample = sample_name, recalib = recalib_name)\n  }\n  \n  proq_scores_train <- prop_btw_q_h(\n    scores_train, sample_name = \"train\", recalib_name = \"none\"\n  )\n  proq_scores_valid <- prop_btw_q_h(\n    scores_valid, sample_name = \"valid\", recalib_name = \"none\"\n  )\n  proq_scores_calib <- prop_btw_q_h(\n    scores_calib, sample_name = \"calib\", recalib_name = \"none\"\n  )\n  proq_scores_test <- prop_btw_q_h(\n    scores_test, sample_name = \"test\", recalib_name = \"none\"\n  )\n  proq_scores_c_platt_calib <- prop_btw_q_h(\n    scores_c_platt_calib, sample_name = \"calib\", recalib_name = \"platt\"\n  )\n  proq_scores_c_platt_test <- prop_btw_q_h(\n    scores_c_platt_test, sample_name = \"test\", recalib_name = \"platt\"\n  )\n  proq_scores_c_iso_calib <- prop_btw_q_h(\n    scores_c_iso_calib, sample_name = \"calib\", recalib_name = \"isotonic\"\n  )\n  proq_scores_c_iso_test <- prop_btw_q_h(\n    scores_c_iso_test, sample_name = \"test\", recalib_name = \"isotonic\"\n  )\n  \n\n  ## Dispersion Metrics----\n  disp_train <- dispersion_metrics(\n    true_probas = true_prob$train, scores = scores_train\n  ) |> \n    mutate(sample = \"train\", recalib = \"none\")\n  disp_valid <- dispersion_metrics(\n    true_probas = true_prob$valid, scores = scores_valid\n  ) |>\n    mutate(sample = \"valid\", recalib = \"none\")\n  \n  disp_calib <- dispersion_metrics(\n    true_probas = true_prob$calib, scores = scores_calib\n  ) |>\n    mutate(sample = \"calib\", recalib = \"none\")\n  \n  disp_test <- dispersion_metrics(\n    true_probas = true_prob$test, scores = scores_test\n  ) |> \n    mutate(sample = \"test\", recalib = \"none\")\n  \n  \n  disp_c_platt_calib <- dispersion_metrics(\n    true_probas = true_prob$calib, scores = scores_c_platt_calib\n  ) |>\n    mutate(sample = \"calib\", recalib = \"platt\")\n  \n  disp_c_platt_test <- dispersion_metrics(\n    true_probas = true_prob$test, scores = scores_c_platt_test\n  ) |> \n    mutate(sample = \"test\", recalib = \"platt\")\n  \n  disp_c_iso_calib <- dispersion_metrics(\n    true_probas = true_prob$calib, scores = scores_c_iso_calib\n  ) |>\n    mutate(sample = \"calib\", recalib = \"isotonic\")\n  \n  disp_c_iso_test <- dispersion_metrics(\n    true_probas = true_prob$test, scores = scores_c_iso_test\n  ) |> \n    mutate(sample = \"test\", recalib = \"isotonic\")\n  \n  # Performance and Calibration Metrics\n  # We add very small noise to predicted scores\n  # otherwise the local regression may crash\n  scores_train_noise <- scores_train +\n    runif(n = length(scores_train), min = 0, max = 0.01)\n  scores_train_noise[scores_train_noise > 1] <- 1\n  metrics_train <- compute_metrics(\n    obs = tb_train$d, scores = scores_train_noise, true_probas = true_prob$train\n  ) |> mutate(sample = \"train\", recalib = \"none\")\n  \n  scores_valid_noise <- scores_valid +\n    runif(n = length(scores_valid), min = 0, max = 0.01)\n  scores_valid_noise[scores_valid_noise > 1] <- 1\n  metrics_valid <- compute_metrics(\n    obs = tb_valid$d, scores = scores_valid_noise, true_probas = true_prob$valid\n  ) |> mutate(sample = \"valid\", recalib = \"none\")\n  \n  scores_calib_noise <- scores_calib +\n    runif(n = length(scores_calib), min = 0, max = 0.01)\n  scores_calib_noise[scores_calib_noise > 1] <- 1\n  metrics_calib <- compute_metrics(\n    obs = tb_calib$d, scores = scores_calib_noise, true_probas = true_prob$calib\n  ) |> mutate(sample = \"calib\", recalib = \"none\")\n  \n  scores_test_noise <- scores_test +\n    runif(n = length(scores_test), min = 0, max = 0.01)\n  scores_test_noise[scores_test_noise > 1] <- 1\n  metrics_test <- compute_metrics(\n    obs = tb_test$d, scores = scores_test_noise, true_probas = true_prob$test\n  ) |> mutate(sample = \"test\", recalib = \"none\")\n  \n  # With recalibrated scores (platt)\n  scores_c_platt_calib_noise <- scores_c_platt_calib +\n    runif(n = length(scores_c_platt_calib), min = 0, max = 0.01)\n  scores_c_platt_calib_noise[scores_c_platt_calib_noise > 1] <- 1\n  metrics_c_platt_calib <- compute_metrics(\n    obs = tb_calib$d, scores = scores_c_platt_calib_noise, \n    true_probas = true_prob$calib\n  ) |> mutate(sample = \"calib\", recalib = \"platt\")\n  \n  scores_c_platt_test_noise <- scores_c_platt_test +\n    runif(n = length(scores_c_platt_test), min = 0, max = 0.01)\n  scores_c_platt_test_noise[scores_c_platt_test_noise > 1] <- 1\n  metrics_c_platt_test <- compute_metrics(\n    obs = tb_test$d, scores = scores_c_platt_test_noise, \n    true_probas = true_prob$test\n  ) |> mutate(sample = \"test\", recalib = \"platt\")\n  \n  # With recalibrated scores (isotonic)\n  scores_c_iso_calib_noise <- scores_c_iso_calib +\n    runif(n = length(scores_c_iso_calib), min = 0, max = 0.01)\n  scores_c_iso_calib_noise[scores_c_iso_calib_noise > 1] <- 1\n  metrics_c_iso_calib <- compute_metrics(\n    obs = tb_calib$d, scores = scores_c_iso_calib_noise, \n    true_probas = true_prob$calib\n  ) |> mutate(sample = \"calib\", recalib = \"isotonic\")\n  \n  scores_c_iso_test_noise <- scores_c_iso_test +\n    runif(n = length(scores_c_iso_test), min = 0, max = 0.01)\n  scores_c_iso_test_noise[scores_c_iso_test_noise > 1] <- 1\n  metrics_c_iso_test <- compute_metrics(\n    obs = tb_test$d, scores = scores_c_iso_test_noise, \n    true_probas = true_prob$test\n  ) |> mutate(sample = \"test\", recalib = \"isotonic\")\n  \n  tb_metrics <- metrics_train |>\n    bind_rows(metrics_valid) |>\n    bind_rows(metrics_calib) |>\n    bind_rows(metrics_test) |>\n    bind_rows(metrics_c_platt_calib) |>\n    bind_rows(metrics_c_platt_test) |>\n    bind_rows(metrics_c_iso_calib) |>\n    bind_rows(metrics_c_iso_test) |>\n    left_join(\n      disp_train |>\n        bind_rows(disp_valid) |> \n        bind_rows(disp_calib) |> \n        bind_rows(disp_test) |> \n        bind_rows(disp_c_platt_calib) |> \n        bind_rows(disp_c_platt_test) |> \n        bind_rows(disp_c_iso_calib) |> \n        bind_rows(disp_c_iso_test),\n      by = c(\"sample\", \"recalib\")\n    ) |>\n    mutate(\n      scenario = simu_data$scenario,\n      ind = ind,\n      repn = simu_data$repn,\n      max_depth = params$max_depth,\n      nb_iter = nb_iter\n    )\n  \n  tb_prop_scores <- proq_scores_train |>\n    bind_rows(proq_scores_valid) |>\n    bind_rows(proq_scores_calib) |>\n    bind_rows(proq_scores_test) |>\n    bind_rows(proq_scores_c_platt_calib) |>\n    bind_rows(proq_scores_c_platt_test) |>\n    bind_rows(proq_scores_c_iso_calib) |>\n    bind_rows(proq_scores_c_iso_test) |>\n    mutate(\n      scenario = simu_data$scenario,\n      ind = ind,\n      repn = simu_data$repn,\n      max_depth = params$max_depth,\n      nb_iter = nb_iter\n    )\n\n  list(\n    scenario = simu_data$scenario,     # data scenario\n    ind = ind,                         # index for grid\n    repn = simu_data$repn,             # data replication ID\n    nb_iter = nb_iter,                 # number of boosting iterations\n    tb_metrics = tb_metrics,           # table with performance/calib/divergence\n                                       #  metrics\n    tb_prop_scores = tb_prop_scores,   # table with P(q1 < score < q2)\n    scores_hist = scores_hist          # histogram of scores\n  )\n}\n```\n:::\n\n\n\n\nWe define another function, `simul_xgb()`{.R} which trains an extreme gradient boosting model for a single replication. It calls the `get_metrics_nb_iter()`{.R} on each of the boosting iterations of the model from the second to the last (400th), and returns a list of length 400-1 where each element is a list returned by the `get_metrics_nb_iter()`{.R}.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Function `simul_xgb()`{.R}\"}\n#' Train an xgboost model and compute performance, calibration, and dispersion\n#' metrics\n#'\n#' @param params tibble with hyperparameters for the simulation\n#' @param ind index of the grid (numerical ID)\n#' @param simu_data simulated data obtained with `simulate_data_wrapper()`\nsimul_xgb <- function(params,\n                      ind,\n                      simu_data) {\n  tb_train <- simu_data$data$train |> rename(d = y)\n  tb_valid <- simu_data$data$valid |> rename(d = y)\n  tb_calib <- simu_data$data$calib |> rename(d = y)\n  tb_test <- simu_data$data$test |> rename(d = y)\n  true_prob <-\n    list(\n      train = simu_data$data$probs_train,\n      valid = simu_data$data$probs_valid,\n      calib = simu_data$data$probs_calib,\n      test = simu_data$data$probs_test\n    )\n\n  ## Format data for xgboost----\n  tb_train_xgb <- xgb.DMatrix(\n    data = model.matrix(d ~ -1 + ., tb_train), label = tb_train$d\n  )\n  tb_valid_xgb <- xgb.DMatrix(\n    data = model.matrix(d ~ -1 + ., tb_valid), label = tb_valid$d\n  )\n  tb_calib_xgb <- xgb.DMatrix(\n    data = model.matrix(d ~ -1 + ., tb_calib), label = tb_calib$d\n  )\n  tb_test_xgb <- xgb.DMatrix(\n    data = model.matrix(d ~ -1 + ., tb_test), label = tb_test$d\n  )\n  # Parameters for the algorithm\n  param <- list(\n    max_depth = params$max_depth, #Note: root node is indexed 0\n    eta = params$eta,\n    nthread = 1,\n    objective = \"binary:logistic\",\n    eval_metric = \"auc\"\n  )\n  watchlist <- list(train = tb_train_xgb, eval = tb_valid_xgb)\n\n  ## Estimation----\n  xgb_fit <- xgb.train(\n    param, tb_train_xgb,\n    nrounds = params$nb_iter_total,\n    watchlist,\n    verbose = 0\n  )\n\n  # Then, for each boosting iteration number up to params$nb_iter_total\n  # compute the predicted scores and evaluate the metrics\n  resul <- map(\n    seq(2, params$nb_iter_total),\n    ~get_metrics_nb_iter(\n      nb_iter = .x,\n      params = params,\n      fitted_xgb = xgb_fit,\n      tb_train_xgb = tb_train_xgb,\n      tb_valid_xgb = tb_valid_xgb,\n      tb_calib_xgb = tb_calib_xgb,\n      tb_test_xgb = tb_test_xgb,\n      simu_data = simu_data,\n      true_prob = true_prob\n    ),\n  )\n  resul\n}\n\nsimulate_xgb_scenario <- function(scenario, params_df, repn) {\n  # Generate Data\n  simu_data <- simulate_data_wrapper(\n    scenario = scenario,\n    params_df = params_df,\n    repn = repn\n  )\n\n  # Looping over the grid hyperparameters for the scenario\n  res_simul <- vector(mode = \"list\", length = nrow(grid))\n  cli::cli_progress_bar(\"Iteration grid\", total = nrow(grid), type = \"tasks\")\n  for (j in 1:nrow(grid)) {\n    curent_params <- grid |> dplyr::slice(!!j)\n    res_simul[[j]] <- simul_xgb(\n      params = curent_params,\n      ind = curent_params$ind,\n      simu_data = simu_data\n    )\n    cli::cli_progress_update()\n  }\n\n\n  # The metrics computed for all set of hyperparameters (identified with `ind`)\n  # and for each number of boosting iterations (`nb_iter`), for the current\n  # scenario (`scenario`) and current replication number (`repn`)\n  metrics_simul <- map(\n    res_simul,\n    function(simul_grid_j) map(simul_grid_j, \"tb_metrics\") |> list_rbind()\n  ) |>\n    list_rbind()\n\n  # P(q_1<s(x)<q_2)\n  prop_scores_simul <- map(\n    res_simul,\n    function(simul_grid_j) map(simul_grid_j, \"tb_prop_scores\") |> list_rbind()\n  ) |>\n    list_rbind()\n\n  # Histogram of estimated scores\n  scores_hist <- map(\n    res_simul,\n    function(simul_grid_j) map(simul_grid_j, \"scores_hist\")\n  )\n\n  list(\n    metrics_simul = metrics_simul,\n    scores_hist = scores_hist,\n    prop_scores_simul = prop_scores_simul\n  )\n}\n```\n:::\n\n\n\n### Grid\n\nWe consider the following grid:\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid <- expand_grid(\n  max_depth = c(2, 4, 6),\n  nb_iter_total = 400,\n  eta = 0.3\n) |>\n  mutate(ind = row_number())\n```\n:::\n\n\nThe desired number of replications for each scenario needs to be set:\n\n::: {.cell}\n\n```{.r .cell-code}\nrepns_vector <- 1:100\n```\n:::\n\n\n\nThe different configurations are reported in @tbl-grid-values-xgb.\n\n\n::: {#tbl-grid-values-xgb .cell tbl-cap='Grid Search Values'}\n\n```{.r .cell-code}\nDT::datatable(grid)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-bf270f4163c9df54b4a7\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-bf270f4163c9df54b4a7\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\"],[2,4,6],[400,400,400],[0.3,0.3,0.3],[1,2,3]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>max_depth<\\/th>\\n      <th>nb_iter_total<\\/th>\\n      <th>eta<\\/th>\\n      <th>ind<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,4]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"max_depth\",\"targets\":1},{\"name\":\"nb_iter_total\",\"targets\":2},{\"name\":\"eta\",\"targets\":3},{\"name\":\"ind\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nWe define a function, `simulate_xgb_scenario()`{.R} to train the model on a dataset for all different values of the hyperparameters of the grid. This function performs a single replication of the simulations for a single scenario.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Function `simulate_xgb_scenario()`{.R}\"}\nsimulate_xgb_scenario <- function(scenario, params_df, repn) {\n  # Generate Data\n  simu_data <- simulate_data_wrapper(\n    scenario = scenario,\n    params_df = params_df,\n    repn = repn\n  )\n\n  # Looping over the grid hyperparameters for the scenario\n  res_simul <- vector(mode = \"list\", length = nrow(grid))\n  cli::cli_progress_bar(\"Iteration grid\", total = nrow(grid), type = \"tasks\")\n  for (j in 1:nrow(grid)) {\n    curent_params <- grid |> dplyr::slice(!!j)\n    res_simul[[j]] <- simul_xgb(\n      params = curent_params,\n      ind = curent_params$ind,\n      simu_data = simu_data\n    )\n    cli::cli_progress_update()\n  }\n\n\n  # The metrics computed for all set of hyperparameters (identified with `ind`)\n  # and for each number of boosting iterations (`nb_iter`), for the current\n  # scenario (`scenario`) and current replication number (`repn`)\n  metrics_simul <- map(\n    res_simul,\n    function(simul_grid_j) map(simul_grid_j, \"tb_metrics\") |> list_rbind()\n  ) |>\n    list_rbind()\n\n  # Sanity check\n  # metrics_simul |> count(scenario, repn, ind, sample, nb_iter) |>\n  #   filter(n > 1)\n\n  # P(q_1<s(x)<q_2)\n  prop_scores_simul <- map(\n    res_simul,\n    function(simul_grid_j) map(simul_grid_j, \"tb_prop_scores\") |> list_rbind()\n  ) |>\n    list_rbind()\n\n  # Sanity check\n  # prop_scores_simul |> count(scenario, repn, ind, sample, nb_iter)\n\n  # Histogram of estimated scores\n  scores_hist <- map(\n    res_simul,\n    function(simul_grid_j) map(simul_grid_j, \"scores_hist\")\n  )\n\n  list(\n    metrics_simul = metrics_simul,\n    scores_hist = scores_hist,\n    prop_scores_simul = prop_scores_simul\n  )\n}\n```\n:::\n\n\n\n## Estimations\n\n\nWe loop over the 16 scenarios and run the 100 replications in parallel.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Estimation codes\"}\nlibrary(pbapply)\nlibrary(parallel)\nncl <- detectCores()-1\n(cl <- makeCluster(ncl))\n\nclusterEvalQ(cl, {\n  library(tidyverse)\n  library(locfit)\n  library(philentropy)\n  library(xgboost)\n  library(ks)\n}) |>\n  invisible()\n\nclusterExport(\n  cl, c(\n    # Functions\n    \"brier_score\",\n    \"compute_metrics\",\n    \"dispersion_metrics\",\n    \"prop_btw_quantiles\",\n    \"subset_target\",\n    \"simulate_data\",\n    \"simulate_data_wrapper\",\n    \"simul_xgb\",\n    \"simulate_xgb_scenario\",\n    \"get_metrics_nb_iter\",\n    \"recalibrate\",\n    # Objects\n    \"grid\",\n    \"params_df\",\n    \"repns_vector\"\n  )\n)\n\n# make directory if not existing\nif (!dir.exists(\"../output/simul/\")) {\n  dir.create(\"../output/simul/\", recursive = TRUE)\n}\n\nfor (i_scenario in 13:16) {\n  scenario <- i_scenario\n  print(str_c(\"Scenario \", scenario, \"/\", nrow(params_df)))\n  clusterExport(cl, c(\"scenario\"))\n  resul_xgb_scenario <-\n    pblapply(\n      1:length(repns_vector), function(i) simulate_xgb_scenario(\n        scenario = scenario, params_df = params_df, repn = repns_vector[i]\n      ),\n      cl = cl\n    )\n  save(\n    resul_xgb_scenario,\n    file = str_c(\"../output/simul/resul_xgb_scenario_\", scenario, \".rda\")\n  )\n}\nstopCluster(cl)\n```\n:::\n\n\n\nThe results can be loaded as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscenarios <- 1:16\nfiles <- str_c(\n  \"../output/simul/resul_xgb_scenario_\", scenarios, \".rda\"\n)\nresul_xgb <- map(files[file.exists(files)], ~{load(.x) ; resul_xgb_scenario})\n```\n:::\n\n\n\n\nThe `resul_rf` object is of length 16: each element contains the simulations for a scenario. For each scenario, the elements are a list of length `max(repns_vector)`, i.e., the number of replications. Each replication gives, in a list, the following elements:\n\n- `metrics_simul`: the metrics (AUC, Calibration, KL Divergence, etc.) for each model from the grid search, for all boosting iterations\n- `scores_hist`: the counts on bins defined on estimated scores (on train, validation, calibration, and test sets ; for calibration and test sets, the counts are given with or without recalibration)\n- `prop_scores_simul`: the estimations of $\\mathbb{P}(q_1 < \\hat{\\mathbf{x}}< q_2)$ for various values of `q_1` and `q_2`.\n\n## Results\n\nWe can now extract some information from the results.\n\nWe first aggregate all the computed metrics performance/calibration/divergence in a single tibble, `metrics_xgb_all`.\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Codes to create the metrics table\"}\nmetrics_xgb_all <- map(\n  resul_xgb,\n  function(resul_xgb_sc) map(resul_xgb_sc, \"metrics_simul\") |> list_rbind()\n) |>\n  list_rbind() |>\n  mutate(\n    sample = factor(\n      sample,\n      levels = c(\"train\", \"valid\", \"calib\", \"test\"),\n      labels = c(\"Train\",\"Validation\", \"Calibration\" ,\"Test\")\n    ),\n    recalib = factor(\n      recalib,\n      levels = c(\"none\", \"platt\", \"isotonic\"),\n      labels = c(\"None\", \"Platt\", \"Isotonic\")\n    )\n  )\n\n# Sanity check\n# metrics_xgb_all |> count(scenario, ind, sample, nb_iter) |>\n#   filter(n != max(repns_vector))\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\nFor each replication, we made some hyperparameters vary. Let us identify some models of interest:\n\n- `smallest`: model with the lowest number of boosting iteration\n- `largest`: model with the highest number of boosting iteration\n- `largest_auc`: model with the highest AUC on validation set\n- `lowest_mse`: model with the lowest MSE on validation set\n- `lowest_ici`: model with the lowest ICI on validation set\n- `lowest_kl`: model with the lowest KL Divergence on validation set\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Identify the smallest tree on the validation set, when the scores are not\n# recalibrated\nsmallest_xgb <-\n  metrics_xgb_all |>\n  filter(sample == \"Validation\", recalib == \"None\") |>\n  group_by(scenario, repn) |>\n  arrange(nb_iter) |>\n  slice_head(n = 1) |>\n  select(scenario, repn, ind, nb_iter, recalib) |>\n  mutate(result_type = \"smallest\") |>\n  ungroup()\n\n# Identify the largest tree\nlargest_xgb <-\n  metrics_xgb_all |>\n  filter(sample == \"Validation\", recalib == \"None\") |>\n  group_by(scenario, repn) |>\n  arrange(desc(nb_iter)) |>\n  slice_head(n = 1) |>\n  select(scenario, repn, ind, nb_iter, recalib) |>\n  mutate(result_type = \"largest\") |>\n  ungroup()\n\n# Identify tree with highest AUC on test set\nhighest_auc_xgb <-\n  metrics_xgb_all |>\n  filter(sample == \"Validation\", recalib == \"None\") |>\n  group_by(scenario, repn) |>\n  arrange(desc(AUC)) |>\n  slice_head(n = 1) |>\n  select(scenario, repn, ind, nb_iter, recalib) |>\n  mutate(result_type = \"largest_auc\") |>\n  ungroup()\n\n# Identify tree with lowest MSE\nlowest_mse_xgb <-\n  metrics_xgb_all |>\n  filter(sample == \"Validation\", recalib == \"None\") |>\n  group_by(scenario, repn) |>\n  arrange(mse) |>\n  slice_head(n = 1) |>\n  select(scenario, repn, ind, nb_iter, recalib) |>\n  mutate(result_type = \"lowest_mse\") |>\n  ungroup()\n\n# Identify tree with lowest brier\nlowest_brier_xgb <-\n  metrics_xgb_all |>\n  filter(sample == \"Validation\", recalib == \"None\") |>\n  group_by(scenario, repn) |>\n  arrange(brier) |>\n  slice_head(n = 1) |>\n  select(scenario, repn, ind, nb_iter, recalib) |>\n  mutate(result_type = \"lowest_brier\") |>\n  ungroup()\n\n# Identify tree with lowest ICI\nlowest_ici_xgb <-\n  metrics_xgb_all |>\n  filter(sample == \"Validation\", recalib == \"None\") |>\n  group_by(scenario, repn) |>\n  arrange(ici) |>\n  slice_head(n = 1) |>\n  select(scenario, repn, ind, nb_iter, recalib) |>\n  mutate(result_type = \"lowest_ici\") |>\n  ungroup()\n\n# Identify tree with lowest KL\nlowest_kl_xgb <-\n  metrics_xgb_all |>\n  filter(sample == \"Validation\", recalib == \"None\") |>\n  group_by(scenario, repn) |>\n  arrange(KL_20_true_probas) |>\n  slice_head(n = 1) |>\n  select(scenario, repn, ind, nb_iter, recalib) |>\n  mutate(result_type = \"lowest_kl\") |>\n  ungroup()\n\nmediocre_ici_xgb <- \n  metrics_xgb_all |>\n  filter(sample == \"Validation\", recalib == \"None\") |>\n  group_by(scenario, repn) |>\n  # For each replication for a scenario, we select a model with a mediocre \n  # calibration\n  mutate(\n    mean_ici = mean(ici),\n    sd_ici = sd(ici),\n    upb_ici = mean_ici + sd_ici,\n  ) |> \n  filter(ici >  upb_ici) |> \n  # Among the configurations for which the calibration is not within 1-sd of the\n  # average calibration, we select the model with the lowest ICI\n  arrange(ici) |> \n  slice_head(n = 1) |> \n  select(scenario, repn, ind, nb_iter, recalib) |>\n  mutate(result_type = \"high_ici\") |>\n  ungroup()\n\n# Merge these\nmodels_of_interest_xgb <-\n  smallest_xgb |>\n  bind_rows(largest_xgb) |>\n  bind_rows(highest_auc_xgb) |>\n  bind_rows(lowest_mse_xgb) |>\n  bind_rows(lowest_brier_xgb) |>\n  bind_rows(lowest_ici_xgb) |>\n  bind_rows(lowest_kl_xgb) |> \n  bind_rows(mediocre_ici_xgb)\n\nmodels_of_interest_metrics <- NULL\nfor (recalibration_method in c(\"None\", \"Platt\", \"Isotonic\")) {\n  # Add metrics now\n  models_of_interest_metrics <-\n    models_of_interest_metrics |>\n    bind_rows(\n      models_of_interest_xgb |> select(-recalib) |>\n        left_join(\n          metrics_xgb_all |>\n            filter(\n              recalib == recalibration_method,\n              sample %in% c(\"Validation\", \"Test\")\n            ),\n          by = c(\"scenario\", \"repn\", \"ind\", \"nb_iter\"),\n          relationship = \"many-to-many\" # (calib, test)\n        )\n    )\n}\n\n\nmodels_of_interest_metrics <-\n  models_of_interest_metrics |>\n  mutate(\n    result_type = factor(\n      result_type,\n      levels = c(\n        \"smallest\", \"largest\", \"lowest_mse\", \"largest_auc\",\n        \"lowest_brier\", \"lowest_ici\", \"lowest_kl\", \"high_ici\"),\n      labels = c(\n        \"Smallest\", \"Largest\", \"MSE*\", \"AUC*\",\n        \"Brier*\", \"ICI*\", \"KL*\", \"High ICI\"\n      )\n    )\n  )\n\n# Sanity check\n# models_of_interest_metrics |> count(scenario, sample, result_type)\n```\n:::\n\n\n### Metrics vs Number of Iterations\n\nWe define a function, `plot_metrics()`{.R} to plot selected metrics (AUC, ICI, and KL Divergence) as a function of the number of boosting iterations, for a given value for the hyperparameter `max_depth`. Each curve corresponds to a value of the maximal depth hyperparameter.\n\nTBD\n\n### Distribution of Scores\n\nLet us extract all the histogram information computed over the simulations and put that in a single object, `scores_hist_all`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_hist_all <-\n  map(\n    resul_xgb,\n    function(resul_xgb_sc) map(resul_xgb_sc, \"scores_hist\")\n  )\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nWe then define a function, `plot_bp_xgb()`{.R} which plots the distribution of scores on the test set for a single replication (`repn`), for a scenario, (`scenario`). We also define a helper function, `plot_bp_interest()`, which plots the histogram of the scores at a specific iteration number. We will then be able to plot the distributions at the beginning of the boosting iterations, at the end, at a point where the AUC was the highest on the validation set, and at a point where the KL divergence between the distribution of scores on the validation set and the distribution of the true probabilities was the lowest. We will plot the distributions of the scores returned by the classifier, as well as those obtained with the reclibrators.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Function `plot_metrics()`{.R}\"}\nplot_bp_interest <- function(metrics_interest,\n                             scores_hist_interest,\n                             label,\n                             recalib_method) {\n  subtitle <- str_c(\n    \"Depth = \", metrics_interest$max_depth, \", \",\n    \"MSE = \", round(metrics_interest$mse, 2), \", \",\n    \"AUC = \", round(metrics_interest$AUC, 2), \", \\n\",\n    \"Brier = \", round(metrics_interest$brier, 2), \",\",\n    \"ICI = \", round(metrics_interest$ici, 2), \", \",\n    \"KL = \", round(metrics_interest$KL_20_true_probas, 2)\n  )\n\n  if (recalib_method == \"none\") {\n    plot(\n      main = str_c(label, \" (iter = \", metrics_interest$nb_iter,\")\"),\n      scores_hist_interest$test,\n      xlab = latex2exp::TeX(\"$\\\\hat{s}(x)$\"),\n      ylab = \"\"\n    )\n  } else if (recalib_method == \"platt\") {\n    plot(\n      main = str_c(label, \" (iter = \", metrics_interest$nb_iter,\")\"),\n      scores_hist_interest$test_c_platt,\n      xlab = latex2exp::TeX(\"$\\\\hat{s}(x)$\"),\n      ylab = \"\",\n      col = colour_recalib[[\"Platt\"]]\n    )\n  } else if (recalib_method == \"iso\") {\n    plot(\n      main = str_c(label, \" (iter = \", metrics_interest$nb_iter,\")\"),\n      scores_hist_interest$test_c_iso,\n      xlab = latex2exp::TeX(\"$\\\\hat{s}(x)$\"),\n      ylab = \"\",\n      col = colour_recalib[[\"Isotonic\"]]\n    )\n  }\n  mtext(side = 3, line = -0.25, adj = .5, subtitle, cex = .5)\n}\n\nplot_bp_xgb <- function(scenario,\n                        repn,\n                        paper_version = FALSE) {\n  # Focus on current scenario\n  scores_hist_scenario <- scores_hist_all[[scenario]]\n  # Focus on a particular replication\n  scores_hist_repn <- scores_hist_scenario[[repn]]\n  # # Focus on a value for max_depth\n  max_depth_val <- map_dbl(scores_hist_repn, ~.x[[1]]$max_depth)\n  # i_max_depth <- which(max_depth_val == max_depth)\n  # scores_hist <- scores_hist_repn[[i_max_depth]]\n  \n  # True Probabilities\n  simu_data <- simulate_data_wrapper(\n    scenario = scenario,\n    params_df = params_df,\n    repn = repn # only one replication here\n  )\n  true_prob <- simu_data$data$probs_train\n  \n  for (recalib_method in c(\"none\", \"platt\", \"iso\")) {\n    \n    i_method <- match(recalib_method, c(\"none\", \"platt\", \"iso\"))\n    recalib_method_lab <- c(\"None\", \"Platt\", \"Isotonic\")[i_method]\n    \n    # The metrics for the corresponding simulations, on the validation set\n    metrics_xgb_current_valid <-\n      metrics_xgb_all |>\n      filter(\n        scenario == !!scenario,\n        repn == !!repn,\n        sample == \"Validation\",\n        recalib == \"None\"\n      )\n    # and on the test set\n    metrics_xgb_current_test <-\n      metrics_xgb_all |>\n      filter(\n        scenario == !!scenario,\n        repn == !!repn,\n        sample == \"Test\",\n        recalib == recalib_method_lab\n      )\n    \n    if (paper_version == FALSE) {\n      hist(\n        true_prob,\n        breaks = seq(0, 1, by = .05),\n        xlab = \"p\", ylab = \"\",\n        main = \"True Probabilities\",\n        xlim = c(0, 1)\n      )\n      mtext(\n        side = 2, recalib_method_lab, line = 2.5, cex = 1,\n        font.lab = 2\n      )\n      # Iterations of interest----\n      ## Start of iterations\n      scores_hist_start <- scores_hist_repn[[1]][[1]]\n      metrics_start <- metrics_xgb_current_test |>\n        filter(\n          nb_iter == scores_hist_start$nb_iter,\n          max_depth == scores_hist_start$max_depth\n        )\n      \n      plot_bp_interest(\n        metrics_interest = metrics_start,\n        scores_hist_interest = scores_hist_start,\n        label = \"Start\",\n        recalib_method = recalib_method\n      )\n      \n      ## End of iterations\n      scores_hist_end <- scores_hist_repn[[1]][[length(scores_hist_repn[[1]])]]\n      metrics_end <- metrics_xgb_current_test |>\n        filter(\n          nb_iter == scores_hist_end$nb_iter,\n          max_depth == scores_hist_start$max_depth\n        )\n      plot_bp_interest(\n        metrics_interest = metrics_end,\n        scores_hist_interest = scores_hist_end,\n        label = \"End\",\n        recalib_method = recalib_method\n      )\n      \n      ## Iteration with min MSE on validation set\n      metrics_valid_mse_star <- metrics_xgb_current_valid |> arrange(mse) |>\n        dplyr::slice(1)\n      nb_iter_mse <- metrics_valid_mse_star$nb_iter\n      max_depth_mse_star <- metrics_valid_mse_star$max_depth\n      i_max_depth_mse_star <- which(max_depth_val == max_depth_mse_star)\n      # Metrics at the same iteration on the test set\n      metrics_min_mse <-\n        metrics_xgb_current_test |>\n        filter(\n          nb_iter == !!nb_iter_mse,\n          max_depth == max_depth_mse_star\n        )\n      # Note: indexing at 0 here...\n      ind_mse <- which(map_dbl(scores_hist_repn[[i_max_depth_mse_star]], \"nb_iter\") == nb_iter_mse)\n      scores_hist_min_mse <- scores_hist_repn[[i_max_depth_mse_star]][[ind_mse]]\n      plot_bp_interest(\n        metrics_interest = metrics_min_mse,\n        scores_hist_interest = scores_hist_min_mse,\n        label = \"MSE*\",\n        recalib_method = recalib_method\n      )\n    }\n    ## Iteration with max AUC on validation set\n    metrics_valid_auc_star <-\n      metrics_xgb_current_valid |> arrange(desc(AUC)) |> dplyr::slice(1)\n    nb_iter_auc <- metrics_valid_auc_star$nb_iter\n    max_depth_auc_star <- metrics_valid_auc_star$max_depth\n    i_max_depth_auc_star <- which(max_depth_val == max_depth_auc_star)\n    \n    metrics_max_auc <-\n      metrics_xgb_current_test |>\n      filter(nb_iter == !!nb_iter_auc, max_depth == max_depth_auc_star)\n    # Note: indexing at 0 here...\n    ind_auc <- which(map_dbl(scores_hist_repn[[i_max_depth_auc_star]], \"nb_iter\") == nb_iter_auc)\n    scores_hist_max_auc <- scores_hist_repn[[i_max_depth_auc_star]][[ind_auc]]\n    plot_bp_interest(\n      metrics_interest = metrics_max_auc,\n      scores_hist_interest = scores_hist_max_auc,\n      label = \"AUC*\",\n      recalib_method = recalib_method\n    )\n    if (paper_version == TRUE) {\n      mtext(\n        side = 2, recalib_method_lab, line = 2.5, cex = 1,\n        font.lab = 2\n      )\n    }\n    \n    ## Min Brier on validation set\n    metrics_valid_brier_star <-\n      metrics_xgb_current_valid |> arrange(brier) |> dplyr::slice(1)\n    nb_iter_brier <- metrics_valid_brier_star$nb_iter\n    max_depth_brier_star <- metrics_valid_brier_star$max_depth\n    i_max_depth_brier_star <- which(max_depth_val == max_depth_brier_star)\n    \n    metrics_min_brier <-\n      metrics_xgb_current_test |>\n      filter(nb_iter == !!nb_iter_brier, max_depth == max_depth_brier_star)\n    ind_brier <- which(map_dbl(scores_hist_repn[[i_max_depth_brier_star]], \"nb_iter\") == nb_iter_brier)\n    scores_hist_min_brier <- scores_hist_repn[[i_max_depth_brier_star]][[ind_brier]]\n    plot_bp_interest(\n      metrics_interest = metrics_min_brier,\n      scores_hist_interest = scores_hist_min_brier,\n      label = \"Brier*\",\n      recalib_method = recalib_method\n    )\n    \n    ## Min ICI on validation set\n    metrics_valid_ici_star <-\n      metrics_xgb_current_valid |> arrange(ici) |> dplyr::slice(1)\n    nb_iter_ici <-   metrics_valid_ici_star$nb_iter\n    max_depth_ici_star <- metrics_valid_ici_star$max_depth\n    i_max_depth_ici_star <- which(max_depth_val == max_depth_ici_star)\n    \n    metrics_min_ici <-\n      metrics_xgb_current_test |>\n      filter(nb_iter == !!nb_iter_ici, max_depth == max_depth_ici_star)\n    ind_ici <- which(map_dbl(scores_hist_repn[[i_max_depth_ici_star]], \"nb_iter\") == nb_iter_ici)\n    scores_hist_min_ici <- scores_hist_repn[[i_max_depth_ici_star]][[ind_ici]]\n    plot_bp_interest(\n      metrics_interest = metrics_min_ici,\n      scores_hist_interest = scores_hist_min_ici,\n      label = \"ICI*\",\n      recalib_method = recalib_method\n    )\n    \n    ## Min KL on validation set\n    metrics_valid_kl_star <-\n      metrics_xgb_current_valid |> arrange(KL_20_true_probas) |> dplyr::slice(1)\n    nb_iter_kl <- metrics_valid_kl_star$nb_iter\n    max_depth_kl_star <- metrics_valid_kl_star$max_depth\n    i_max_depth_kl_star <- which(max_depth_val == max_depth_kl_star)\n    \n    metrics_min_kl <-\n      metrics_xgb_current_test |>\n      filter(nb_iter == !!nb_iter_kl, max_depth == max_depth_kl_star)\n    ind_kl <- which(map_dbl(scores_hist_repn[[i_max_depth_kl_star]], \"nb_iter\") == nb_iter_kl)\n    scores_hist_min_kl <- scores_hist_repn[[i_max_depth_kl_star]][[ind_kl]]\n    plot_bp_interest(\n      metrics_interest = metrics_min_kl,\n      scores_hist_interest = scores_hist_min_kl,\n      label = \"KL*\",\n      recalib_method = recalib_method\n    )\n    \n    ## Mediocre ICI on validation set\n    identified_mici <- \n      mediocre_ici_xgb |> filter(scenario == !!scenario, repn == !!repn)\n    \n    metrics_valid_mici_star <- metrics_xgb_current_valid |> \n      filter(ind == identified_mici$ind, nb_iter == identified_mici$nb_iter)\n    nb_iter_mici <- metrics_valid_mici_star$nb_iter\n    max_depth_mici_star <- metrics_valid_mici_star$max_depth\n    i_max_depth_mici_star <- which(max_depth_val == max_depth_mici_star)\n    \n    metrics_mici <-\n      metrics_xgb_current_test |>\n      filter(nb_iter == !!nb_iter_mici, max_depth == max_depth_mici_star)\n    ind_mici <- which(map_dbl(scores_hist_repn[[i_max_depth_mici_star]], \"nb_iter\") == nb_iter_mici)\n    scores_hist_mici <- scores_hist_repn[[i_max_depth_mici_star]][[ind_mici]]\n    plot_bp_interest(\n      metrics_interest = metrics_mici,\n      scores_hist_interest = scores_hist_mici,\n      label = \"High ICI\",\n      recalib_method = recalib_method\n    )\n  }\n}\n```\n:::\n\n\n:::{.panel-tabset}\n#### DGP 1\n::::{.panel-tabset}\n##### 0 noise variable\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 1, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 1, 0 noise variable)](simul-xgb_files/figure-html/fig-xgb-bp-1-0-1.png){#fig-xgb-bp-1-0 width=1344}\n:::\n:::\n\n##### 10 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 2, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 1, 10 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-1-10-1.png){#fig-xgb-bp-1-10 width=1344}\n:::\n:::\n\n##### 50 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 3, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 1, 50 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-1-50-1.png){#fig-xgb-bp-1-50 width=1344}\n:::\n:::\n\n##### 100 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 4, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 1, 100 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-1-100-1.png){#fig-xgb-bp-1-100 width=1344}\n:::\n:::\n\n::::\n#### DGP 2\n::::{.panel-tabset}\n##### 0 noise variable\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 5, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 2, 0 noise variable)](simul-xgb_files/figure-html/fig-xgb-bp-2-0-1.png){#fig-xgb-bp-2-0 width=1344}\n:::\n:::\n\n##### 10 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 6, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 2, 10 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-2-10-1.png){#fig-xgb-bp-2-10 width=1344}\n:::\n:::\n\n##### 50 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 7, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 2, 50 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-2-50-1.png){#fig-xgb-bp-2-50 width=1344}\n:::\n:::\n\n##### 100 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 8, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 2, 100 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-2-100-1.png){#fig-xgb-bp-2-100 width=1344}\n:::\n:::\n\n::::\n#### DGP 3\n::::{.panel-tabset}\n##### 0 noise variable\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 9, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 3, 0 noise variable)](simul-xgb_files/figure-html/fig-xgb-bp-3-0-1.png){#fig-xgb-bp-3-0 width=1344}\n:::\n:::\n\n##### 10 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 10, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 3, 10 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-3-10-1.png){#fig-xgb-bp-3-10 width=1344}\n:::\n:::\n\n##### 50 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 11, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 3, 50 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-3-50-1.png){#fig-xgb-bp-3-50 width=1344}\n:::\n:::\n\n##### 100 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 12, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 3, 100 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-3-100-1.png){#fig-xgb-bp-3-100 width=1344}\n:::\n:::\n\n::::\n#### DGP 4\n::::{.panel-tabset}\n##### 0 noise variable\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 13, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 4, 0 noise variable)](simul-xgb_files/figure-html/fig-xgb-bp-4-0-1.png){#fig-xgb-bp-4-0 width=1344}\n:::\n:::\n\n##### 10 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 14, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 4, 10 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-4-10-1.png){#fig-xgb-bp-4-10 width=1344}\n:::\n:::\n\n##### 50 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 15, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 4, 50 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-4-50-1.png){#fig-xgb-bp-4-50 width=1344}\n:::\n:::\n\n##### 100 noise variables\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npar(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))\nplot_bp_xgb(scenario = 16, repn = 1)\n```\n\n::: {.cell-output-display}\n![Distribution of scores on the test set (DGP 4, 100 noise variables)](simul-xgb_files/figure-html/fig-xgb-bp-4-100-1.png){#fig-xgb-bp-4-100 width=1344}\n:::\n:::\n\n::::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Code to create PDF figures\"}\nif(!dir.exists(\"../figs/\")) dir.create(\"../figs/\")\nfor (scenario in 1:16) {\n  pdf(\n    file = str_c(\"../figs/bp_synthetic_xbg_\", scenario, \".pdf\"),\n    height = 4.5, width = 10\n  )\n  par(mfrow = c(3,5), mar = c(4.1, 4, 3.5, 1.5))\n  plot_bp_xgb(scenario = scenario, repn = 1, paper_version = TRUE)\n  dev.off()\n}\n```\n:::\n\n\n\n\n### KL Divergence and Calibration along Boosting Iterations\n\nWe can examine the evolution of the relationship between the divergence of score distributions from true probabilities and model calibration across increasing boosting iterations.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Codes to create the figure\"}\ndf_plot <-\n  metrics_xgb_all |>\n  mutate(\n    dgp = case_when(\n      scenario %in% 1:4 ~ 1,\n      scenario %in% 5:8 ~ 2,\n      scenario %in% 9:12 ~ 3,\n      scenario %in% 13:16 ~ 4\n    ),\n    dgp = factor(dgp, levels = 1:4, labels = str_c(\"DGP \", 1:4)),\n    no_noise = c(0, 10, 50, 100)[(scenario-1)%%4 + 1],\n    no_noise = factor(\n      no_noise, levels = c(no_noise),\n      labels = str_c(no_noise, \" noise variables\")\n    )\n  ) |>\n  select(\n    dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth,\n    brier, ici, KL_20_true_probas\n  ) |>\n  group_by(dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth) |>\n  summarise(\n    brier = mean(brier),\n    ici = mean(ici),\n    KL_20_true_probas = mean(KL_20_true_probas),\n    .groups = \"drop\"\n  ) |>\n  mutate(\n    max_depth = factor(\n      max_depth,\n      levels = c(2, 4, 6)\n    )\n  )\n\nformatter1000 <- function(x) x*1000\n```\n:::\n\n\n::: {.panel-tabset}\n\n#### Brier\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Codes to create the figure\"}\np_brier <- ggplot(\n  data = df_plot |> arrange(nb_iter) |> filter(max_depth == 2),\n  mapping = aes(x = brier, y = KL_20_true_probas)\n) +\n  geom_path(\n    mapping = aes(colour = sample, linetype = recalib),\n    arrow = arrow(type = \"closed\", ends = \"last\",\n                  length = unit(0.08, \"inches\"))\n  ) +\n  # facet_wrap(~scenario) +\n  ggh4x::facet_grid2(dgp~no_noise, scales = \"free_y\", independent = \"y\") +\n  labs(\n    x = latex2exp::TeX(\"Calibration (Brier), $\\\\times 10^{3}$, log scale\"),\n    y = \"KL Divergence\"\n  ) +\n  scale_x_log10(labels = formatter1000) + scale_y_log10() +\n  scale_colour_manual(\"Sample\", values = colour_samples) +\n  scale_linetype_discrete(\"Recalibration\") +\n  theme_paper() +\n  theme(legend.key.width = unit(1.5, \"cm\"))\n\n\nggsave(\n  p_brier, file = \"../figs/xgb-kl-calib-brier-leaves-all.pdf\",\n       width = 13, height = 8\n)\n\np_brier\n```\n\n::: {.cell-output-display}\n![KL Divergence and Calibration (Brier) across increasing boosting iterations (log scales)](simul-xgb_files/figure-html/fig-kl-calib-brier-xgb-iterations-1.png){#fig-kl-calib-brier-xgb-iterations width=960}\n:::\n:::\n\n\n#### ICI\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Codes to create the figure\"}\np_ici <- ggplot(\n  data = df_plot |> arrange(nb_iter) |> filter(max_depth == 2),\n  mapping = aes(x = ici, y = KL_20_true_probas)\n) +\n  geom_path(\n    mapping = aes(colour = sample, linetype = recalib),\n    arrow = arrow(type = \"closed\", ends = \"last\",\n                  length = unit(0.08, \"inches\"))\n  ) +\n  # facet_wrap(~scenario) +\n  ggh4x::facet_grid2(dgp~no_noise, scales = \"free_y\", independent = \"y\") +\n  labs(\n    x = latex2exp::TeX(\"Calibration (ICI), $\\\\times 10^{3}$, log scale\"),\n    y = \"KL Divergence\"\n  ) +\n  scale_x_log10(labels = formatter1000) + scale_y_log10() +\n  scale_colour_manual(\"Sample\", values = colour_samples) +\n  scale_linetype_discrete(\"Recalibration\") +\n  theme_paper() +\n  theme(legend.key.width = unit(1.5, \"cm\"))\n\n\nggsave(\n  p_ici, file = \"../figs/xgb-kl-calib-ici-leaves-all.pdf\",\n  width = 13, height = 8\n)\np_ici\n```\n\n::: {.cell-output-display}\n![KL Divergence and Calibration (ICI) across increasing boosting iterations (log scales)](simul-xgb_files/figure-html/fig-kl-calib-ici-xgb-iterations-1.png){#fig-kl-calib-ici-xgb-iterations width=960}\n:::\n:::\n\n\n\n:::\n\n\n\n### Tables\n\n\nWe examine the average values of various metrics across 100 replications for the \"best\" model selected according to different criteria: AUC* for the model with hyperparameters chosen to maximize AUC on the validation set, ICI* for the model with hyperparameters selected to minimize ICI, Brier* for minimizing the Brier Score, KL* for minimizing the KL divergence between the distribution of scores on the validation set and the true probability distribution, smallest for the model with only 2 boosting iterations, largest for the model with 400 boosting iterations, and mediocre ICI for the model chosen to illustrate the effects of score recalibration when initial calibration is mediocre.\n\n\n::: {#tbl-metrics-xgb .cell tbl-cap='Performance and calibration metrics (Brier Score, Integrated Calibration Index, Kullback-Leibler Divergence) computed on the test set, on scores returned by the model (column \\'None\\'), on scores recalibrated using Platt scaling (column \\'Platt\\'), or Isotonic regression (coliumn \\'Isotonic\\')'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Display the R codes to produce the table\"}\nmodels_interest_xgb <- models_of_interest_metrics |> \n  group_by(scenario, recalib, sample, result_type) |> \n  summarise(\n    AUC_lower = quantile(AUC, probs = 2.5/100),\n    AUC_upper = quantile(AUC, probs = 97.5/100),\n    AUC_sd = sd(AUC),\n    AUC = mean(AUC),\n    brier_lower = quantile(brier, probs = 2.5/100),\n    brier_upper = quantile(brier, probs = 97.5/100),\n    brier_sd = sd(brier),\n    brier = mean(brier),\n    ici_lower = quantile(ici, probs = 2.5/100),\n    ici_upper = quantile(ici, probs = 97.5/100),\n    ici_sd = sd(ici),\n    ici = mean(ici),\n    KL_20_true_probas_lower = quantile(KL_20_true_probas, probs = 2.5/100),\n    KL_20_true_probas_upper = quantile(KL_20_true_probas, probs = 97.5/100),\n    KL_20_true_probas_sd = sd(KL_20_true_probas),\n    KL_20_true_probas = mean(KL_20_true_probas),\n    quant_ratio_sd = sd(inter_quantile_10_90),\n    quant_ratio = mean(inter_quantile_10_90),\n    .groups = \"drop\"\n  ) |> \n  mutate(\n    model = \"xgb\",\n    sample = str_to_lower(as.character(sample)),\n    dgp = case_when(\n      scenario %in% 1:4 ~ 1,\n      scenario %in% 5:8 ~ 2,\n      scenario %in% 9:12 ~ 3,\n      scenario %in% 13:16 ~ 4\n    ),\n    no_noise = c(0, 10, 50, 100)[(scenario-1)%%4 + 1],\n    no_noise = factor(\n      no_noise,\n      levels = c(no_noise),\n      labels = str_c(no_noise, \" noise variables\")\n    )\n  )\n\n# Sanity check\n# metrics_xgb_all |> count(scenario, recalib, ind, sample, nb_iter) |>\n#   filter(n != max(repns_vector))\n\ntable_models_interest_mean <- \n  models_interest_xgb |> \n  filter(sample == \"test\") |> \n  select(\n    dgp, no_noise, recalib, sample, result_type, \n    brier, ici, kl = KL_20_true_probas,\n  ) |> \n  filter(\n    result_type %in% c(\"AUC*\", \"KL*\", \"High ICI\", \"Smallest\", \"Largest\")\n  ) |> \n  mutate(value_type = \"mean\")\n\n\ntable_models_interest_sd <- \n  models_interest_xgb |> \n  filter(sample == \"test\") |> \n  select(\n    dgp, no_noise, recalib, sample, result_type, \n    brier = brier_sd, ici = ici_sd, \n    kl = KL_20_true_probas_sd,\n  ) |> \n  filter(\n    result_type %in% c(\"AUC*\", \"KL*\", \"High ICI\", \"Smallest\", \"Largest\")\n  ) |> \n  mutate(value_type = \"sd\")\n\ndigits <- 3\n\ntable_models_interest_mean |> \n  bind_rows(table_models_interest_sd) |> \n  pivot_longer(cols = c(brier, ici, kl)) |> \n  pivot_wider(names_from = \"value_type\", values_from = \"value\") |> \n  mutate(value = str_c(round(`mean`, digits), \" (\", round(`sd`, digits), \")\")) |> \n  select(-mean, -sd, -sample) |> \n  pivot_wider(names_from = c(recalib, name), values_from = value) |> \n  knitr::kable(\n    align = str_c(\"cl\", str_c(rep(\"c\", 3*3), collapse = \"\"), collapse = \"\"),\n    escape = FALSE, booktabs = T, digits = 3, format = \"markdown\",\n    col.names = c(\n      \"DGP\", \"Noise\", \"Optim.\",\n      rep(c(\"BS\", \"ICI\", \"KL\"), 3)\n    )\n  ) |> \n  kableExtra::collapse_rows(columns = 1:2, valign = \"top\") |> \n  kableExtra::add_header_above(\n    c(\" \" = 3,\n      \"None\" = 3,\n      \"Platt\" = 3,\n      \"Isotonic\" = 3\n    )\n  ) |> \n  kableExtra::scroll_box(fixed_thead = TRUE, height = \"500px\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div style=\"border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:500px; \"><table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;position: sticky; top:0; background-color: #FFFFFF;\" colspan=\"3\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; position: sticky; top:0; background-color: #FFFFFF;\" colspan=\"3\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">None</div></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; position: sticky; top:0; background-color: #FFFFFF;\" colspan=\"3\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">Platt</div></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; position: sticky; top:0; background-color: #FFFFFF;\" colspan=\"3\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">Isotonic</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> DGP </th>\n   <th style=\"text-align:left;position: sticky; top:0; background-color: #FFFFFF;\"> Noise </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> Optim. </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> BS </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> ICI </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> KL </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> BS </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> ICI </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> KL </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> BS </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> ICI </th>\n   <th style=\"text-align:center;position: sticky; top:0; background-color: #FFFFFF;\"> KL </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;vertical-align: top !important;\" rowspan=\"20\"> 1 </td>\n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 0 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.231 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.115 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.878 (0.063) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 2.037 (0.05) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 2.04 (0.059) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.026 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.046 (0.012) </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.013 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.095 (0.011) </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.306 (0.105) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.054 (0.038) </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.017 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.131 (0.029) </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.295 (0.099) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.202 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.021 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.202 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.107 (0.016) </td>\n   <td style=\"text-align:center;\"> 0.202 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.307 (0.101) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.217 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.062 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.171 (0.101) </td>\n   <td style=\"text-align:center;\"> 0.212 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.018 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.205 (0.065) </td>\n   <td style=\"text-align:center;\"> 0.212 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.356 (0.122) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 10 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.231 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.115 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.878 (0.063) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 2.037 (0.05) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 2.04 (0.059) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.21 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.04 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.042 (0.011) </td>\n   <td style=\"text-align:center;\"> 0.209 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.016 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.151 (0.027) </td>\n   <td style=\"text-align:center;\"> 0.209 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.31 (0.117) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.014 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.066 (0.033) </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.018 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.138 (0.028) </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.298 (0.106) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.204 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.01 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.204 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.016 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.109 (0.015) </td>\n   <td style=\"text-align:center;\"> 0.204 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.302 (0.11) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.229 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.106 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.434 (0.179) </td>\n   <td style=\"text-align:center;\"> 0.216 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.025 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.374 (0.032) </td>\n   <td style=\"text-align:center;\"> 0.216 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.355 (0.117) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 50 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.231 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.115 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.878 (0.063) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 2.037 (0.05) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 2.04 (0.059) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.213 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.048 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.046 (0.011) </td>\n   <td style=\"text-align:center;\"> 0.211 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.017 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.192 (0.019) </td>\n   <td style=\"text-align:center;\"> 0.211 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.329 (0.112) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.075 (0.028) </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.018 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.139 (0.028) </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.307 (0.1) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.205 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.019 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.205 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.016 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.12 (0.02) </td>\n   <td style=\"text-align:center;\"> 0.205 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.312 (0.1) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.235 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.129 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.693 (0.089) </td>\n   <td style=\"text-align:center;\"> 0.216 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.03 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.432 (0.036) </td>\n   <td style=\"text-align:center;\"> 0.215 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.344 (0.115) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 100 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.231 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.115 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.878 (0.063) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 2.037 (0.05) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 2.04 (0.059) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.051 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.051 (0.012) </td>\n   <td style=\"text-align:center;\"> 0.212 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.017 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.205 (0.014) </td>\n   <td style=\"text-align:center;\"> 0.212 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.321 (0.102) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.016 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.09 (0.031) </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.018 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.145 (0.026) </td>\n   <td style=\"text-align:center;\"> 0.201 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.317 (0.111) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.02 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.125 (0.022) </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.304 (0.105) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.236 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.136 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.798 (0.063) </td>\n   <td style=\"text-align:center;\"> 0.216 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.032 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.442 (0.028) </td>\n   <td style=\"text-align:center;\"> 0.215 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.342 (0.114) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;vertical-align: top !important;\" rowspan=\"20\"> 2 </td>\n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 0 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.192 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.226 (0.005) </td>\n   <td style=\"text-align:center;\"> 3.212 (0.199) </td>\n   <td style=\"text-align:center;\"> 0.131 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.035 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.889 (0.089) </td>\n   <td style=\"text-align:center;\"> 0.13 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 1.718 (0.283) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.123 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.016 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.025 (0.01) </td>\n   <td style=\"text-align:center;\"> 0.124 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.042 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.881 (0.034) </td>\n   <td style=\"text-align:center;\"> 0.122 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.207 (0.063) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.118 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.01 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.031 (0.027) </td>\n   <td style=\"text-align:center;\"> 0.12 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.038 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.778 (0.221) </td>\n   <td style=\"text-align:center;\"> 0.118 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.213 (0.073) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.12 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.01 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.013 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.121 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.038 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.863 (0.141) </td>\n   <td style=\"text-align:center;\"> 0.12 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.072) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.131 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.048 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.131 (0.131) </td>\n   <td style=\"text-align:center;\"> 0.13 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.05 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.839 (0.081) </td>\n   <td style=\"text-align:center;\"> 0.127 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.241 (0.073) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 10 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.192 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.226 (0.005) </td>\n   <td style=\"text-align:center;\"> 3.212 (0.199) </td>\n   <td style=\"text-align:center;\"> 0.131 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.035 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.889 (0.089) </td>\n   <td style=\"text-align:center;\"> 0.13 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.003) </td>\n   <td style=\"text-align:center;\"> 1.718 (0.283) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.126 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.028 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.032 (0.01) </td>\n   <td style=\"text-align:center;\"> 0.127 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.045 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.869 (0.035) </td>\n   <td style=\"text-align:center;\"> 0.124 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.01 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.222 (0.075) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.119 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.036 (0.067) </td>\n   <td style=\"text-align:center;\"> 0.12 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.038 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.758 (0.226) </td>\n   <td style=\"text-align:center;\"> 0.119 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.209 (0.069) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.12 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.007 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.122 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.04 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.887 (0.076) </td>\n   <td style=\"text-align:center;\"> 0.121 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.01 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.205 (0.074) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.137 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.075 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.294 (0.136) </td>\n   <td style=\"text-align:center;\"> 0.132 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.058 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.235 (0.363) </td>\n   <td style=\"text-align:center;\"> 0.128 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.263 (0.093) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 50 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.192 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.226 (0.005) </td>\n   <td style=\"text-align:center;\"> 3.212 (0.199) </td>\n   <td style=\"text-align:center;\"> 0.131 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.035 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.889 (0.089) </td>\n   <td style=\"text-align:center;\"> 0.13 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 1.718 (0.283) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.127 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.033 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.039 (0.011) </td>\n   <td style=\"text-align:center;\"> 0.128 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.047 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.863 (0.036) </td>\n   <td style=\"text-align:center;\"> 0.125 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.223 (0.072) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.119 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.013 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.036 (0.016) </td>\n   <td style=\"text-align:center;\"> 0.12 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.038 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.727 (0.226) </td>\n   <td style=\"text-align:center;\"> 0.119 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.204 (0.073) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.121 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.006 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.123 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.041 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.894 (0.045) </td>\n   <td style=\"text-align:center;\"> 0.121 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.215 (0.068) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.139 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.089 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.434 (0.14) </td>\n   <td style=\"text-align:center;\"> 0.133 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.064 (0.006) </td>\n   <td style=\"text-align:center;\"> 1.793 (0.165) </td>\n   <td style=\"text-align:center;\"> 0.127 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.232 (0.077) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 100 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.192 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.226 (0.005) </td>\n   <td style=\"text-align:center;\"> 3.212 (0.199) </td>\n   <td style=\"text-align:center;\"> 0.131 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.035 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.889 (0.089) </td>\n   <td style=\"text-align:center;\"> 0.13 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.003) </td>\n   <td style=\"text-align:center;\"> 1.718 (0.283) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.129 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.037 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.044 (0.011) </td>\n   <td style=\"text-align:center;\"> 0.129 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.048 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.856 (0.034) </td>\n   <td style=\"text-align:center;\"> 0.126 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.223 (0.074) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.119 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.014 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.041 (0.02) </td>\n   <td style=\"text-align:center;\"> 0.121 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.038 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.727 (0.22) </td>\n   <td style=\"text-align:center;\"> 0.119 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.212 (0.068) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.122 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.006 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.124 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.041 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.89 (0.032) </td>\n   <td style=\"text-align:center;\"> 0.122 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.074) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.14 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.094 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.476 (0.082) </td>\n   <td style=\"text-align:center;\"> 0.133 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.066 (0.004) </td>\n   <td style=\"text-align:center;\"> 1.852 (0.112) </td>\n   <td style=\"text-align:center;\"> 0.127 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.009 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.234 (0.067) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;vertical-align: top !important;\" rowspan=\"20\"> 3 </td>\n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 0 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.24 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.075 (0.006) </td>\n   <td style=\"text-align:center;\"> 1.827 (0.099) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.65 (0.21) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 1.674 (0.208) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.228 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.044 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.108 (0.026) </td>\n   <td style=\"text-align:center;\"> 0.226 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.092 (0.022) </td>\n   <td style=\"text-align:center;\"> 0.226 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.291 (0.101) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.22 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.01 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.008) </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.042 (0.013) </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.285 (0.113) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.005 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.047 (0.014) </td>\n   <td style=\"text-align:center;\"> 0.222 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.286 (0.115) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.246 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.105 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.63 (0.086) </td>\n   <td style=\"text-align:center;\"> 0.231 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.014 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.268 (0.047) </td>\n   <td style=\"text-align:center;\"> 0.231 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.375 (0.106) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 10 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.24 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.075 (0.007) </td>\n   <td style=\"text-align:center;\"> 1.827 (0.099) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.65 (0.21) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 1.674 (0.208) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.231 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.052 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.11 (0.024) </td>\n   <td style=\"text-align:center;\"> 0.227 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.123 (0.025) </td>\n   <td style=\"text-align:center;\"> 0.227 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.307 (0.103) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.221 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.01 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.027 (0.021) </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.046 (0.014) </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.287 (0.097) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.222 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.014 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.004 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.222 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.056 (0.019) </td>\n   <td style=\"text-align:center;\"> 0.222 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.284 (0.103) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.253 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.127 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.933 (0.114) </td>\n   <td style=\"text-align:center;\"> 0.232 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.366 (0.035) </td>\n   <td style=\"text-align:center;\"> 0.232 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.382 (0.113) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 50 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.24 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.075 (0.006) </td>\n   <td style=\"text-align:center;\"> 1.827 (0.099) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.65 (0.21) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 1.674 (0.208) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.233 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.06 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.12 (0.025) </td>\n   <td style=\"text-align:center;\"> 0.228 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.163 (0.027) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.342 (0.105) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.221 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.013 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.054 (0.032) </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.049 (0.015) </td>\n   <td style=\"text-align:center;\"> 0.222 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.27 (0.122) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.224 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.018 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.004 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.224 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.075 (0.023) </td>\n   <td style=\"text-align:center;\"> 0.224 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.284 (0.104) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.259 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.145 (0.006) </td>\n   <td style=\"text-align:center;\"> 1.286 (0.167) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.017 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.403 (0.028) </td>\n   <td style=\"text-align:center;\"> 0.232 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.417 (0.113) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 100 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.24 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.075 (0.007) </td>\n   <td style=\"text-align:center;\"> 1.827 (0.099) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.65 (0.21) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 1.674 (0.208) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.235 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.065 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.129 (0.026) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.185 (0.028) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.348 (0.119) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.222 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.067 (0.031) </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.052 (0.016) </td>\n   <td style=\"text-align:center;\"> 0.222 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.291 (0.111) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.225 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.019 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.004 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.224 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.08 (0.021) </td>\n   <td style=\"text-align:center;\"> 0.225 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.301 (0.122) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.261 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.152 (0.005) </td>\n   <td style=\"text-align:center;\"> 1.454 (0.181) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.017 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.418 (0.036) </td>\n   <td style=\"text-align:center;\"> 0.233 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.426 (0.111) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;vertical-align: top !important;\" rowspan=\"20\"> 4 </td>\n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 0 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.239 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.081 (0.01) </td>\n   <td style=\"text-align:center;\"> 2.366 (0.299) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 2.059 (0.108) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 2.061 (0.113) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.209 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.028 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.019 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.208 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.117 (0.015) </td>\n   <td style=\"text-align:center;\"> 0.208 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.318 (0.116) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.204 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.041 (0.021) </td>\n   <td style=\"text-align:center;\"> 0.205 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.017 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.132 (0.02) </td>\n   <td style=\"text-align:center;\"> 0.205 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.305 (0.095) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.018 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.115 (0.012) </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.288 (0.105) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.222 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.074 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.176 (0.196) </td>\n   <td style=\"text-align:center;\"> 0.216 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.02 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.243 (0.128) </td>\n   <td style=\"text-align:center;\"> 0.215 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.359 (0.191) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 10 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.239 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.081 (0.011) </td>\n   <td style=\"text-align:center;\"> 2.366 (0.299) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 2.059 (0.108) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 2.061 (0.113) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.213 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.036 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.018 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.211 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.173 (0.02) </td>\n   <td style=\"text-align:center;\"> 0.211 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.306 (0.11) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.014 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.089 (0.026) </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.016 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.142 (0.023) </td>\n   <td style=\"text-align:center;\"> 0.206 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.302 (0.108) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.211 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.028 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.21 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.156 (0.02) </td>\n   <td style=\"text-align:center;\"> 0.21 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.306 (0.089) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.232 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.106 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.324 (0.279) </td>\n   <td style=\"text-align:center;\"> 0.219 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.021 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.396 (0.125) </td>\n   <td style=\"text-align:center;\"> 0.219 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.435 (0.206) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 50 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.239 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.081 (0.01) </td>\n   <td style=\"text-align:center;\"> 2.366 (0.299) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 2.059 (0.108) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 2.061 (0.113) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.216 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.042 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.019 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.014 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.207 (0.019) </td>\n   <td style=\"text-align:center;\"> 0.215 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.332 (0.103) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.207 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.019 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.127 (0.031) </td>\n   <td style=\"text-align:center;\"> 0.207 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.016 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.145 (0.025) </td>\n   <td style=\"text-align:center;\"> 0.207 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.292 (0.105) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.215 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.034 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.017 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.213 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.014 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.19 (0.021) </td>\n   <td style=\"text-align:center;\"> 0.214 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.347 (0.1) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.238 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.126 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.422 (0.048) </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.024 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.424 (0.039) </td>\n   <td style=\"text-align:center;\"> 0.22 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.382 (0.108) </td>\n  </tr>\n  <tr>\n   \n   <td style=\"text-align:left;vertical-align: top !important;\" rowspan=\"5\"> 100 noise variables </td>\n   <td style=\"text-align:center;\"> Smallest </td>\n   <td style=\"text-align:center;\"> 0.239 (0.001) </td>\n   <td style=\"text-align:center;\"> 0.081 (0.01) </td>\n   <td style=\"text-align:center;\"> 2.366 (0.299) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 2.059 (0.108) </td>\n   <td style=\"text-align:center;\"> 0.229 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 2.061 (0.113) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> Largest </td>\n   <td style=\"text-align:center;\"> 0.218 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.045 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.02 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.216 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.014 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.219 (0.019) </td>\n   <td style=\"text-align:center;\"> 0.216 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.355 (0.11) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> AUC* </td>\n   <td style=\"text-align:center;\"> 0.208 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.021 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.144 (0.034) </td>\n   <td style=\"text-align:center;\"> 0.207 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.015 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.147 (0.024) </td>\n   <td style=\"text-align:center;\"> 0.207 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.326 (0.104) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> KL* </td>\n   <td style=\"text-align:center;\"> 0.216 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.037 (0.006) </td>\n   <td style=\"text-align:center;\"> 0.017 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.215 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.014 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.202 (0.022) </td>\n   <td style=\"text-align:center;\"> 0.215 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.012 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.368 (0.111) </td>\n  </tr>\n  <tr>\n   \n   \n   <td style=\"text-align:center;\"> High ICI </td>\n   <td style=\"text-align:center;\"> 0.241 (0.003) </td>\n   <td style=\"text-align:center;\"> 0.133 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.486 (0.046) </td>\n   <td style=\"text-align:center;\"> 0.221 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.025 (0.004) </td>\n   <td style=\"text-align:center;\"> 0.471 (0.06) </td>\n   <td style=\"text-align:center;\"> 0.22 (0.002) </td>\n   <td style=\"text-align:center;\"> 0.011 (0.005) </td>\n   <td style=\"text-align:center;\"> 0.399 (0.098) </td>\n  </tr>\n</tbody>\n</table></div>\n\n`````\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\\begin{tabular}{clcccccccccc}\n\\toprule\n\\multicolumn{3}{c}{ } & \\multicolumn{3}{c}{None} & \\multicolumn{3}{c}{Platt} & \\multicolumn{3}{c}{Isotonic} \\\\\n\\cmidrule(l{3pt}r{3pt}){4-6} \\cmidrule(l{3pt}r{3pt}){7-9} \\cmidrule(l{3pt}r{3pt}){10-12}\nDGP & Noise & Optim. & BS & ICI & KL & BS & ICI & KL & BS & ICI & KL\\\\\n\\midrule\n &  & AUC* & 0.201 (0.002) & 0.012 (0.005) & 0.054 (0.038) & 0.201 (0.002) & 0.017 (0.005) & 0.131 (0.029) & 0.201 (0.002) & 0.012 (0.004) & 0.295 (0.099)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.202 (0.002) & 0.012 (0.005) & 0.021 (0.006) & 0.202 (0.002) & 0.015 (0.005) & 0.107 (0.016) & 0.202 (0.002) & 0.012 (0.004) & 0.307 (0.101)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 0 noise variables} & High ICI & 0.217 (0.003) & 0.062 (0.006) & 0.171 (0.101) & 0.212 (0.002) & 0.018 (0.005) & 0.205 (0.065) & 0.212 (0.002) & 0.011 (0.005) & 0.356 (0.122)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.201 (0.002) & 0.014 (0.005) & 0.066 (0.033) & 0.201 (0.002) & 0.018 (0.005) & 0.138 (0.028) & 0.201 (0.002) & 0.011 (0.004) & 0.298 (0.106)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.204 (0.002) & 0.015 (0.005) & 0.01 (0.004) & 0.204 (0.002) & 0.016 (0.005) & 0.109 (0.015) & 0.204 (0.002) & 0.012 (0.004) & 0.302 (0.11)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 10 noise variables} & High ICI & 0.229 (0.003) & 0.106 (0.006) & 0.434 (0.179) & 0.216 (0.002) & 0.025 (0.005) & 0.374 (0.032) & 0.216 (0.002) & 0.012 (0.004) & 0.355 (0.117)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.201 (0.002) & 0.015 (0.005) & 0.075 (0.028) & 0.201 (0.002) & 0.018 (0.005) & 0.139 (0.028) & 0.201 (0.002) & 0.012 (0.004) & 0.307 (0.1)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.205 (0.002) & 0.019 (0.005) & 0.009 (0.003) & 0.205 (0.002) & 0.016 (0.004) & 0.12 (0.02) & 0.205 (0.002) & 0.012 (0.004) & 0.312 (0.1)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 50 noise variables} & High ICI & 0.235 (0.003) & 0.129 (0.006) & 0.693 (0.089) & 0.216 (0.002) & 0.03 (0.005) & 0.432 (0.036) & 0.215 (0.002) & 0.011 (0.004) & 0.344 (0.115)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.201 (0.002) & 0.016 (0.005) & 0.09 (0.031) & 0.201 (0.002) & 0.018 (0.005) & 0.145 (0.026) & 0.201 (0.002) & 0.012 (0.004) & 0.317 (0.111)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.206 (0.002) & 0.02 (0.005) & 0.009 (0.004) & 0.206 (0.002) & 0.015 (0.004) & 0.125 (0.022) & 0.206 (0.002) & 0.011 (0.004) & 0.304 (0.105)\\\\\n\\cmidrule{3-12}\n\\multirow[t]{-12}{*}[3\\dimexpr\\aboverulesep+\\belowrulesep+\\cmidrulewidth]{\\centering\\arraybackslash 1} & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 100 noise variables} & High ICI & 0.236 (0.003) & 0.136 (0.006) & 0.798 (0.063) & 0.216 (0.002) & 0.032 (0.005) & 0.442 (0.028) & 0.215 (0.002) & 0.011 (0.004) & 0.342 (0.114)\\\\\n\\cmidrule{1-12}\n &  & AUC* & 0.118 (0.002) & 0.01 (0.004) & 0.031 (0.027) & 0.12 (0.002) & 0.038 (0.004) & 0.778 (0.221) & 0.118 (0.002) & 0.009 (0.004) & 0.213 (0.073)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.12 (0.002) & 0.01 (0.004) & 0.013 (0.005) & 0.121 (0.002) & 0.038 (0.004) & 0.863 (0.141) & 0.12 (0.002) & 0.009 (0.004) & 0.214 (0.072)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 0 noise variables} & High ICI & 0.131 (0.003) & 0.048 (0.004) & 0.131 (0.131) & 0.13 (0.003) & 0.05 (0.005) & 0.839 (0.081) & 0.127 (0.003) & 0.009 (0.003) & 0.241 (0.073)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.119 (0.002) & 0.012 (0.005) & 0.036 (0.067) & 0.12 (0.002) & 0.038 (0.004) & 0.758 (0.226) & 0.119 (0.002) & 0.009 (0.004) & 0.209 (0.069)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.12 (0.002) & 0.011 (0.003) & 0.007 (0.003) & 0.122 (0.002) & 0.04 (0.004) & 0.887 (0.076) & 0.121 (0.002) & 0.01 (0.004) & 0.205 (0.074)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 10 noise variables} & High ICI & 0.137 (0.003) & 0.075 (0.004) & 0.294 (0.136) & 0.132 (0.003) & 0.058 (0.005) & 1.235 (0.363) & 0.128 (0.002) & 0.009 (0.003) & 0.263 (0.093)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.119 (0.002) & 0.013 (0.004) & 0.036 (0.016) & 0.12 (0.002) & 0.038 (0.004) & 0.727 (0.226) & 0.119 (0.002) & 0.009 (0.004) & 0.204 (0.073)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.121 (0.002) & 0.011 (0.003) & 0.006 (0.003) & 0.123 (0.002) & 0.041 (0.004) & 0.894 (0.045) & 0.121 (0.002) & 0.009 (0.003) & 0.215 (0.068)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 50 noise variables} & High ICI & 0.139 (0.003) & 0.089 (0.004) & 0.434 (0.14) & 0.133 (0.003) & 0.064 (0.006) & 1.793 (0.165) & 0.127 (0.002) & 0.009 (0.003) & 0.232 (0.077)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.119 (0.002) & 0.014 (0.004) & 0.041 (0.02) & 0.121 (0.002) & 0.038 (0.004) & 0.727 (0.22) & 0.119 (0.002) & 0.009 (0.004) & 0.212 (0.068)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.122 (0.002) & 0.012 (0.004) & 0.006 (0.003) & 0.124 (0.002) & 0.041 (0.003) & 0.89 (0.032) & 0.122 (0.002) & 0.009 (0.003) & 0.214 (0.074)\\\\\n\\cmidrule{3-12}\n\\multirow[t]{-12}{*}[3\\dimexpr\\aboverulesep+\\belowrulesep+\\cmidrulewidth]{\\centering\\arraybackslash 2} & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 100 noise variables} & High ICI & 0.14 (0.003) & 0.094 (0.004) & 0.476 (0.082) & 0.133 (0.003) & 0.066 (0.004) & 1.852 (0.112) & 0.127 (0.002) & 0.009 (0.004) & 0.234 (0.067)\\\\\n\\cmidrule{1-12}\n &  & AUC* & 0.22 (0.002) & 0.01 (0.004) & 0.012 (0.008) & 0.221 (0.002) & 0.012 (0.004) & 0.042 (0.013) & 0.221 (0.002) & 0.011 (0.004) & 0.285 (0.113)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.221 (0.002) & 0.012 (0.004) & 0.005 (0.002) & 0.221 (0.002) & 0.011 (0.004) & 0.047 (0.014) & 0.222 (0.002) & 0.011 (0.004) & 0.286 (0.115)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 0 noise variables} & High ICI & 0.246 (0.002) & 0.105 (0.005) & 0.63 (0.086) & 0.231 (0.001) & 0.014 (0.004) & 0.268 (0.047) & 0.231 (0.001) & 0.011 (0.004) & 0.375 (0.106)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.221 (0.001) & 0.01 (0.004) & 0.027 (0.021) & 0.221 (0.002) & 0.012 (0.004) & 0.046 (0.014) & 0.221 (0.002) & 0.011 (0.004) & 0.287 (0.097)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.222 (0.002) & 0.014 (0.005) & 0.004 (0.002) & 0.222 (0.002) & 0.012 (0.004) & 0.056 (0.019) & 0.222 (0.002) & 0.011 (0.004) & 0.284 (0.103)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 10 noise variables} & High ICI & 0.253 (0.003) & 0.127 (0.005) & 0.933 (0.114) & 0.232 (0.001) & 0.015 (0.004) & 0.366 (0.035) & 0.232 (0.001) & 0.011 (0.004) & 0.382 (0.113)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.221 (0.001) & 0.013 (0.006) & 0.054 (0.032) & 0.221 (0.002) & 0.012 (0.004) & 0.049 (0.015) & 0.222 (0.002) & 0.011 (0.004) & 0.27 (0.122)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.224 (0.002) & 0.018 (0.006) & 0.004 (0.002) & 0.224 (0.002) & 0.011 (0.004) & 0.075 (0.023) & 0.224 (0.002) & 0.011 (0.004) & 0.284 (0.104)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 50 noise variables} & High ICI & 0.259 (0.003) & 0.145 (0.006) & 1.286 (0.167) & 0.233 (0.001) & 0.017 (0.005) & 0.403 (0.028) & 0.232 (0.001) & 0.011 (0.004) & 0.417 (0.113)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.222 (0.001) & 0.015 (0.006) & 0.067 (0.031) & 0.221 (0.002) & 0.012 (0.004) & 0.052 (0.016) & 0.222 (0.002) & 0.011 (0.004) & 0.291 (0.111)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.225 (0.002) & 0.019 (0.005) & 0.004 (0.002) & 0.224 (0.002) & 0.011 (0.004) & 0.08 (0.021) & 0.225 (0.002) & 0.011 (0.004) & 0.301 (0.122)\\\\\n\\cmidrule{3-12}\n\\multirow[t]{-12}{*}[3\\dimexpr\\aboverulesep+\\belowrulesep+\\cmidrulewidth]{\\centering\\arraybackslash 3} & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 100 noise variables} & High ICI & 0.261 (0.003) & 0.152 (0.005) & 1.454 (0.181) & 0.233 (0.001) & 0.017 (0.004) & 0.418 (0.036) & 0.233 (0.001) & 0.011 (0.005) & 0.426 (0.111)\\\\\n\\cmidrule{1-12}\n &  & AUC* & 0.204 (0.002) & 0.011 (0.004) & 0.041 (0.021) & 0.205 (0.002) & 0.017 (0.004) & 0.132 (0.02) & 0.205 (0.002) & 0.011 (0.005) & 0.305 (0.095)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.206 (0.002) & 0.018 (0.005) & 0.011 (0.004) & 0.206 (0.002) & 0.015 (0.004) & 0.115 (0.012) & 0.206 (0.002) & 0.011 (0.004) & 0.288 (0.105)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 0 noise variables} & High ICI & 0.222 (0.003) & 0.074 (0.005) & 0.176 (0.196) & 0.216 (0.002) & 0.02 (0.005) & 0.243 (0.128) & 0.215 (0.002) & 0.011 (0.004) & 0.359 (0.191)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.206 (0.002) & 0.014 (0.005) & 0.089 (0.026) & 0.206 (0.002) & 0.016 (0.005) & 0.142 (0.023) & 0.206 (0.002) & 0.012 (0.005) & 0.302 (0.108)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.211 (0.002) & 0.028 (0.005) & 0.015 (0.005) & 0.21 (0.002) & 0.015 (0.004) & 0.156 (0.02) & 0.21 (0.002) & 0.012 (0.005) & 0.306 (0.089)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 10 noise variables} & High ICI & 0.232 (0.002) & 0.106 (0.005) & 0.324 (0.279) & 0.219 (0.002) & 0.021 (0.005) & 0.396 (0.125) & 0.219 (0.002) & 0.011 (0.005) & 0.435 (0.206)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.207 (0.002) & 0.019 (0.006) & 0.127 (0.031) & 0.207 (0.002) & 0.016 (0.005) & 0.145 (0.025) & 0.207 (0.002) & 0.012 (0.005) & 0.292 (0.105)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.215 (0.002) & 0.034 (0.006) & 0.017 (0.004) & 0.213 (0.002) & 0.014 (0.004) & 0.19 (0.021) & 0.214 (0.002) & 0.012 (0.004) & 0.347 (0.1)\\\\\n\\cmidrule{3-12}\n & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 50 noise variables} & High ICI & 0.238 (0.003) & 0.126 (0.006) & 0.422 (0.048) & 0.221 (0.002) & 0.024 (0.005) & 0.424 (0.039) & 0.22 (0.002) & 0.012 (0.005) & 0.382 (0.108)\\\\\n\\cmidrule{2-12}\n &  & AUC* & 0.208 (0.002) & 0.021 (0.006) & 0.144 (0.034) & 0.207 (0.002) & 0.015 (0.005) & 0.147 (0.024) & 0.207 (0.002) & 0.012 (0.005) & 0.326 (0.104)\\\\\n\\cmidrule{3-12}\n &  & KL* & 0.216 (0.002) & 0.037 (0.006) & 0.017 (0.004) & 0.215 (0.002) & 0.014 (0.005) & 0.202 (0.022) & 0.215 (0.002) & 0.012 (0.005) & 0.368 (0.111)\\\\\n\\cmidrule{3-12}\n\\multirow[t]{-12}{*}[3\\dimexpr\\aboverulesep+\\belowrulesep+\\cmidrulewidth]{\\centering\\arraybackslash 4} & \\multirow[t]{-3}{*}{\\raggedright\\arraybackslash 100 noise variables} & High ICI & 0.241 (0.003) & 0.133 (0.005) & 0.486 (0.046) & 0.221 (0.002) & 0.025 (0.004) & 0.471 (0.06) & 0.22 (0.002) & 0.011 (0.005) & 0.399 (0.098)\\\\\n\\bottomrule\n\\end{tabular}\n\n\n:::\n:::\n\n\n\n### Before vs. After Recalibration\n\nLet us visualize how the KL divergence and the ICI of a selected model changes after the scores are recalibrated, either using Platt scaling or isotonic regression.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ntable_models_interest_mean <- \n  table_models_interest_mean |> \n  mutate(\n    no_noise = fct_recode(no_noise, `0 noise variable` = \"0 noise variables\"),\n    dgp = str_c(\"DGP \", dgp)\n  )\n\ninitial_points <- table_models_interest_mean |> \n  filter(recalib == \"None\")\n\npoints_after_c <- initial_points |> \n  select(dgp, no_noise, result_type, ici, kl) |> \n  left_join(\n    table_models_interest_mean |> \n      filter(recalib %in% c(\"Platt\", \"Isotonic\")) |> \n      select(dgp, no_noise, recalib, result_type, ici, kl) |> \n      rename(ici_end = ici, kl_end = kl),\n    relationship = \"many-to-many\" # (Platt and Isotonic)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(dgp, no_noise, result_type)`\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\np_kl_vs_ici_recalib <- \n  ggplot() +\n  geom_point(\n    data = initial_points,\n    mapping = aes(x = ici, y = kl, shape = result_type),\n    size = 2\n  ) +\n  geom_segment(\n    data = points_after_c,\n    mapping = aes(\n      x = ici, y = kl, xend = ici_end, yend = kl_end,\n      colour = recalib, linetype = recalib\n    ),\n    arrow = arrow(length=unit(.2, 'cm'))\n  ) +\n  facet_grid(dgp~no_noise, scales = \"free\") +\n  scale_shape_manual(\n    NULL,\n    values = c(\n      # \"Smallest\" = 1,\n      \"AUC*\" = 19,\n      \"KL*\" = 15,\n      \"High ICI\" = 17\n    )\n  ) +\n  labs(x = \"ICI\", y = \"KL Divergence\") +\n  scale_colour_manual(\"Recalibration\", values = colour_recalib) +\n  scale_linetype_discrete(\"Recalibration\") +\n  theme_paper()\n\nggsave(p_kl_vs_ici_recalib, file = \"../figs/kl_vs_ici_recalib.pdf\", width = 12, height = 8)\np_kl_vs_ici_recalib\n```\n\n::: {.cell-output-display}\n![Average KL divergence and ICI before and after recalibration of the estimated scores for DGP 1, for selected models.](simul-xgb_files/figure-html/fig-kl-vs-ici-recalib-dgp-1-1.png){#fig-kl-vs-ici-recalib-dgp-1 width=1152}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "simul-xgb_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}