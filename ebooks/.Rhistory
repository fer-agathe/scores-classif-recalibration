select(scenario, repn, ind, nb_iter, recalib) |>
mutate(result_type = "mediocre_ici") |>
ungroup()
mediocre_ici_xgb
# Merge these
models_of_interest_xgb <-
smallest_xgb |>
bind_rows(largest_xgb) |>
bind_rows(highest_auc_xgb) |>
bind_rows(lowest_mse_xgb) |>
bind_rows(lowest_brier_xgb) |>
bind_rows(lowest_ici_xgb) |>
bind_rows(lowest_kl_xgb) |>
bind_rows(mediocre_ici_xgb)
models_of_interest_metrics <- NULL
for (recalibration_method in c("None", "Platt", "Isotonic")) {
# Add metrics now
models_of_interest_metrics <-
models_of_interest_metrics |>
bind_rows(
models_of_interest_xgb |> select(-recalib) |>
left_join(
metrics_xgb_all |>
filter(
recalib == recalibration_method,
sample %in% c("Validation", "Test")
),
by = c("scenario", "repn", "ind", "nb_iter"),
relationship = "many-to-many" # (calib, test)
)
)
}
for (recalibration_method in c("None", "Platt", "Isotonic")) {
# Add metrics now
models_of_interest_metrics <-
models_of_interest_metrics |>
bind_rows(
models_of_interest_xgb |> select(-recalib) |>
left_join(
metrics_xgb_all |>
filter(
recalib == recalibration_method,
sample %in% c("Validation", "Test")
),
by = c("scenario", "repn", "ind", "nb_iter"),
relationship = "many-to-many" # (calib, test)
)
)
}
models_of_interest_metrics <-
models_of_interest_metrics |>
mutate(
result_type = factor(
result_type,
levels = c(
"smallest", "largest", "lowest_mse", "largest_auc",
"lowest_brier", "lowest_ici", "lowest_kl", "mediocre_ici_xgb"),
labels = c(
"Smallest", "Largest", "MSE*", "AUC*",
"Brier*", "ICI*", "KL*", "Mediocre ICI"
)
)
)
#| fig-cap: Distribution of scores on the test set (DGP 1, 0 noise variable)
#| label: fig-xgb-bp-1-0
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 1, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 1, 10 noise variables)
#| label: fig-xgb-bp-1-10
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 2, repn = 1)
plot_bp_xgb(scenario = 2, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 1, 10 noise variables)
#| label: fig-xgb-bp-1-10
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 2, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 1, 10 noise variables)
#| label: fig-xgb-bp-1-10
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 2, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 1, 10 noise variables)
#| label: fig-xgb-bp-1-10
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 2, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 1, 100 noise variables)
#| label: fig-xgb-bp-1-100
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 4, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 4, 100 noise variables)
#| label: fig-xgb-bp-4-100
#| code-fold: true
#| fig-height: 6
#| fig-width: 12
par(mfrow = c(3,8), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 16, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 4, 100 noise variables)
#| label: fig-xgb-bp-4-100
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 16, repn = 1)
scenario <- 1
pdf(
file = str_c("../figs/bp_synthetic_xbg_", scenario, ".pdf"),
height = 4.5, width = 10
)
par(mfrow = c(3,4), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = scenario, repn = 1, paper_version = TRUE)
dev.off()
pdf(
file = str_c("../figs/bp_synthetic_xbg_", scenario, ".pdf"),
height = 4.5, width = 10
)
par(mfrow = c(3,5), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = scenario, repn = 1, paper_version = TRUE)
dev.off()
for (scenario in 1:16) {
pdf(
file = str_c("../figs/bp_synthetic_xbg_", scenario, ".pdf"),
height = 4.5, width = 10
)
par(mfrow = c(3,5), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = scenario, repn = 1, paper_version = TRUE)
dev.off()
}
#| code-fold: true
#| code-summary: Codes to create the figure
#| fig-cap: KL Divergence and Calibration across increasing boosting iterations
#| label: fig-kl-calib-xgb-iterations
#| fig-width: 10
#| fig-height: 8
df_plot <-
metrics_xgb_all |>
mutate(
dgp = case_when(
scenario %in% 1:4 ~ 1,
scenario %in% 5:8 ~ 2,
scenario %in% 9:12 ~ 3,
scenario %in% 13:16 ~ 4
),
dgp = factor(dgp, levels = 1:4, labels = str_c("DGP ", 1:4)),
no_noise = c(0, 10, 50, 100)[(scenario-1)%%4 + 1],
no_noise = factor(
no_noise, levels = c(no_noise),
labels = str_c(no_noise, " noise variables")
)
) |>
select(
dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth,
brier, ici, KL_20_true_probas
) |>
group_by(dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth) |>
summarise(
brier = mean(brier),
ici = mean(ici),
KL_20_true_probas = mean(KL_20_true_probas)
.groups = "drop"
#| code-fold: true
#| code-summary: Codes to create the figure
#| fig-cap: KL Divergence and Calibration across increasing boosting iterations
#| label: fig-kl-calib-xgb-iterations
#| fig-width: 10
#| fig-height: 8
df_plot <-
metrics_xgb_all |>
mutate(
dgp = case_when(
scenario %in% 1:4 ~ 1,
scenario %in% 5:8 ~ 2,
scenario %in% 9:12 ~ 3,
scenario %in% 13:16 ~ 4
),
dgp = factor(dgp, levels = 1:4, labels = str_c("DGP ", 1:4)),
no_noise = c(0, 10, 50, 100)[(scenario-1)%%4 + 1],
no_noise = factor(
no_noise, levels = c(no_noise),
labels = str_c(no_noise, " noise variables")
)
) |>
select(
dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth,
brier, ici, KL_20_true_probas
) |>
group_by(dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth) |>
summarise(
brier = mean(brier),
ici = mean(ici),
KL_20_true_probas = mean(KL_20_true_probas),
.groups = "drop"
) |>
mutate(
max_depth = factor(
max_depth,
levels = c(2, 4, 6)
)
)
#| code-fold: true
#| code-summary: Codes to create the figure
#| fig-cap: KL Divergence and Calibration across increasing boosting iterations
#| label: fig-kl-calib-xgb-iterations
#| fig-width: 10
#| fig-height: 8
df_plot <-
metrics_xgb_all |>
mutate(
dgp = case_when(
scenario %in% 1:4 ~ 1,
scenario %in% 5:8 ~ 2,
scenario %in% 9:12 ~ 3,
scenario %in% 13:16 ~ 4
),
dgp = factor(dgp, levels = 1:4, labels = str_c("DGP ", 1:4)),
no_noise = c(0, 10, 50, 100)[(scenario-1)%%4 + 1],
no_noise = factor(
no_noise, levels = c(no_noise),
labels = str_c(no_noise, " noise variables")
)
) |>
select(
dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth,
brier, ici, KL_20_true_probas
) |>
group_by(dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth) |>
summarise(
brier = mean(brier),
ici = mean(ici),
KL_20_true_probas = mean(KL_20_true_probas),
.groups = "drop"
) |>
mutate(
max_depth = factor(
max_depth,
levels = c(2, 4, 6)
)
)
formatter1000 <- function(x) x*1000
#| code-fold: true
#| code-summary: Codes to create the figure
#| fig-cap: KL Divergence and Calibration (Brier) across increasing boosting iterations (log scales)
#| label: fig-kl-calib-brier-xgb-iterations
#| fig-width: 10
#| fig-height: 8
p_brier <- ggplot(
data = df_plot |> arrange(nb_iter) |> filter(max_depth == 2),
mapping = aes(x = brier, y = KL_20_true_probas)
) +
geom_path(
mapping = aes(colour = sample, linetype = recalib),
arrow = arrow(type = "closed", ends = "last",
length = unit(0.08, "inches"))
) +
# facet_wrap(~scenario) +
ggh4x::facet_grid2(dgp~no_noise, scales = "free_y", independent = "y") +
labs(
x = latex2exp::TeX("Calibration (Brier), $\\times 10^{3}$, log scale"),
y = "KL Divergence"
) +
scale_x_log10(labels = formatter1000) + scale_y_log10() +
scale_colour_manual("Sample", values = colour_samples) +
scale_linetype_discrete("Recalibration") +
theme_paper() +
theme(legend.key.width = unit(1.5, "cm"))
ggsave(
p_brier, file = "../figs/xgb-kl-calib-brier-leaves-all.pdf",
width = 10, height = 8
)
p_brier
df_plot
ggsave(
p_brier, file = "../figs/xgb-kl-calib-brier-leaves-all.pdf",
width = 12, height = 8
)
ggsave(
p_brier, file = "../figs/xgb-kl-calib-brier-leaves-all.pdf",
width = 14, height = 8
)
ggsave(
p_brier, file = "../figs/xgb-kl-calib-brier-leaves-all.pdf",
width = 13, height = 8
)
p_ici <- ggplot(
data = df_plot |> arrange(nb_iter) |> filter(max_depth == 2),
mapping = aes(x = ici, y = KL_20_true_probas)
) +
geom_path(
mapping = aes(colour = sample, linetype = recalib),
arrow = arrow(type = "closed", ends = "last",
length = unit(0.08, "inches"))
) +
# facet_wrap(~scenario) +
ggh4x::facet_grid2(dgp~no_noise, scales = "free_y", independent = "y") +
labs(
x = latex2exp::TeX("Calibration (ICI), $\\times 10^{3}$, log scale"),
y = "KL Divergence"
) +
scale_x_log10(labels = formatter1000) + scale_y_log10() +
scale_colour_manual("Sample", values = colour_samples) +
scale_linetype_discrete("Recalibration") +
theme_paper() +
theme(legend.key.width = unit(1.5, "cm"))
ggsave(
p_ici, file = "../figs/xgb-kl-calib-ici-leaves-all.pdf",
width = 13, height = 8
)
#| code-fold: true
#| code-summary: Display the R codes to produce the table
#| tbl-cap: "Performance and calibration metrics (Brier Score, Integrated Calibration Index, Kullback-Leibler Divergence) computed on the test set, on scores returned by the model (column 'None'), on scores recalibrated using Platt scaling (column 'Platt'), or Isotonic regression (coliumn 'Isotonic')"
#| label: tbl-metrics-xgb
models_interest_xgb <- models_of_interest_metrics |>
group_by(scenario, recalib, sample, result_type) |>
summarise(
AUC_lower = quantile(AUC, probs = 2.5/100),
AUC_upper = quantile(AUC, probs = 97.5/100),
AUC_sd = sd(AUC),
AUC = mean(AUC),
brier_lower = quantile(brier, probs = 2.5/100),
brier_upper = quantile(brier, probs = 97.5/100),
brier_sd = sd(brier),
brier = mean(brier),
ici_lower = quantile(ici, probs = 2.5/100),
ici_upper = quantile(ici, probs = 97.5/100),
ici_sd = sd(ici),
ici = mean(ici),
KL_20_true_probas_lower = quantile(KL_20_true_probas, probs = 2.5/100),
KL_20_true_probas_upper = quantile(KL_20_true_probas, probs = 97.5/100),
KL_20_true_probas_sd = sd(KL_20_true_probas),
KL_20_true_probas = mean(KL_20_true_probas),
quant_ratio_sd = sd(inter_quantile_10_90),
quant_ratio = mean(inter_quantile_10_90),
.groups = "drop"
) |>
mutate(
model = "xgb",
sample = str_to_lower(as.character(sample)),
dgp = case_when(
scenario %in% 1:4 ~ 1,
scenario %in% 5:8 ~ 2,
scenario %in% 9:12 ~ 3,
scenario %in% 13:16 ~ 4
),
no_noise = c(0, 10, 50, 100)[(scenario-1)%%4 + 1],
no_noise = factor(
no_noise,
levels = c(no_noise),
labels = str_c(no_noise, " noise variables")
)
)
models_interest_xgb$result_type |> levels()
table_models_interest_mean <-
models_interest_xgb |>
filter(sample == "test") |>
select(
dgp, no_noise, recalib, sample, result_type,
brier, ici, kl = KL_20_true_probas, ll
) |>
filter(
result_type %in% c("AUC*", "KL*", "LL*", "Smallest", "Largest", "Mediocre ICI")
) |>
mutate(value_type = "mean")
table_models_interest_mean <-
models_interest_xgb |>
filter(sample == "test") |>
select(
dgp, no_noise, recalib, sample, result_type,
brier, ici, kl = KL_20_true_probas,
) |>
filter(
result_type %in% c("AUC*", "KL*", "Mediocre ICI", "Smallest", "Largest")
) |>
mutate(value_type = "mean")
table_models_interest_sd <-
models_interest_xgb |>
filter(sample == "test") |>
select(
dgp, no_noise, recalib, sample, result_type,
brier = brier_sd, ici = ici_sd,
kl = KL_20_true_probas_sd,
) |>
filter(
result_type %in% c("AUC*", "KL*", "Mediocre ICI", "Smallest", "Largest")
) |>
mutate(value_type = "sd")
digits <- 2
table_models_interest_mean |>
bind_rows(table_models_interest_sd) |>
pivot_longer(cols = c(brier, ici, kl)) |>
pivot_wider(names_from = "value_type", values_from = "value") |>
mutate(value = str_c(round(`mean`, digits), " (", round(`sd`, digits), ")")) |>
select(-mean, -sd, -sample) |>
pivot_wider(names_from = c(recalib, name), values_from = value) |>
knitr::kable(
align = str_c("cl", str_c(rep("c", 3*3), collapse = ""), collapse = ""),
escape = FALSE, booktabs = T, digits = 3, format = "markdown",
col.names = c(
"DGP", "Noise", "Optim.",
rep(c("BS", "ICI", "KL"), 3)
)
) |>
kableExtra::collapse_rows(columns = 1:2, valign = "top") |>
kableExtra::add_header_above(
c(" " = 3,
"None" = 3,
"Platt" = 3,
"Isotonic" = 3
)
) |>
kableExtra::scroll_box(fixed_thead = TRUE, height = "500px")
table_models_interest_mean |>
bind_rows(table_models_interest_sd) |>
pivot_longer(cols = c(brier, ici, kl)) |>
pivot_wider(names_from = "value_type", values_from = "value") |>
mutate(value = str_c(round(`mean`, digits), " (", round(`sd`, digits), ")")) |>
select(-mean, -sd, -sample) |>
pivot_wider(names_from = c(recalib, name), values_from = value) |>
knitr::kable(
align = str_c("cl", str_c(rep("c", 3*3), collapse = ""), collapse = ""),
escape = FALSE, booktabs = T, digits = 3, format = "latex",
col.names = c(
"DGP", "Noise", "Optim.",
rep(c("BS", "ICI", "KL"), 3)
)
) |>
kableExtra::collapse_rows(columns = 1:2, valign = "top") |>
kableExtra::add_header_above(
c(" " = 3,
"None" = 3,
"Platt" = 3,
"Isotonic" = 3
)
)
table_models_interest_mean |>
bind_rows(table_models_interest_sd) |>
pivot_longer(cols = c(brier, ici, kl)) |>
pivot_wider(names_from = "value_type", values_from = "value") |>
mutate(value = str_c(round(`mean`, digits), " (", round(`sd`, digits), ")")) |>
select(-mean, -sd, -sample) |>
pivot_wider(names_from = c(recalib, name), values_from = value) |>
knitr::kable(
align = str_c("cl", str_c(rep("c", 3*3), collapse = ""), collapse = ""),
escape = FALSE, booktabs = T, digits = 3, format = "latex",
col.names = c(
"DGP", "Noise", "Optim.",
rep(c("BS", "ICI", "KL"), 3)
)
) |>
kableExtra::collapse_rows(columns = 1:2, valign = "top") |>
kableExtra::add_header_above(
c(" " = 3,
"None" = 3,
"Platt" = 3,
"Isotonic" = 3
)
)
table_models_interest_mean |>
bind_rows(table_models_interest_sd) |>
pivot_longer(cols = c(brier, ici, kl)) |>
pivot_wider(names_from = "value_type", values_from = "value") |>
mutate(value = str_c(round(`mean`, digits), " (", round(`sd`, digits), ")")) |>
select(-mean, -sd, -sample) |>
pivot_wider(names_from = c(recalib, name), values_from = value) |>
knitr::kable(
align = str_c("cl", str_c(rep("c", 3*3), collapse = ""), collapse = ""),
escape = FALSE, booktabs = T, digits = 3, format = "latex",
col.names = c(
"DGP", "Noise", "Optim.",
rep(c("BS", "ICI", "KL"), 3)
)
)
table_models_interest_mean |>
bind_rows(table_models_interest_sd) |>
pivot_longer(cols = c(brier, ici, kl)) |>
pivot_wider(names_from = "value_type", values_from = "value") |>
mutate(value = str_c(round(`mean`, digits), " (", round(`sd`, digits), ")")) |>
select(-mean, -sd, -sample) |>
pivot_wider(names_from = c(recalib, name), values_from = value) |>
knitr::kable(
align = str_c("cl", str_c(rep("c", 3*3), collapse = ""), collapse = ""),
escape = FALSE, booktabs = T, digits = 3, format = "latex",
col.names = c(
"DGP", "Noise", "Optim.",
rep(c("BS", "ICI", "KL"), 3)
)
) |>
kableExtra::collapse_rows(columns = 1:2, valign = "top") |>
kableExtra::add_header_above(
c(" " = 3,
"None" = 3,
"Platt" = 3,
"Isotonic" = 3
)
)
table_models_interest_sd
table_models_interest_mean
