max_depth_brier_star <- metrics_valid_brier_star$max_depth
i_max_depth_brier_star <- which(max_depth_val == max_depth_brier_star)
metrics_min_brier <-
metrics_xgb_current_test |>
filter(nb_iter == !!nb_iter_brier, max_depth == max_depth_brier_star)
ind_brier <- which(map_dbl(scores_hist_repn[[i_max_depth_brier_star]], "nb_iter") == nb_iter_brier)
scores_hist_min_brier <- scores_hist_repn[[i_max_depth_brier_star]][[ind_brier]]
plot_bp_interest(
metrics_interest = metrics_min_brier,
scores_hist_interest = scores_hist_min_brier,
label = "Brier*",
recalib_method = recalib_method
)
## Min ICI on validation set
metrics_valid_ici_star <-
metrics_xgb_current_valid |> arrange(ici) |> dplyr::slice(1)
nb_iter_ici <-   metrics_valid_ici_star$nb_iter
max_depth_ici_star <- metrics_valid_ici_star$max_depth
i_max_depth_ici_star <- which(max_depth_val == max_depth_ici_star)
metrics_min_ici <-
metrics_xgb_current_test |>
filter(nb_iter == !!nb_iter_ici, max_depth == max_depth_ici_star)
ind_ici <- which(map_dbl(scores_hist_repn[[i_max_depth_ici_star]], "nb_iter") == nb_iter_ici)
scores_hist_min_ici <- scores_hist_repn[[i_max_depth_ici_star]][[ind_ici]]
plot_bp_interest(
metrics_interest = metrics_min_ici,
scores_hist_interest = scores_hist_min_ici,
label = "ICI*",
recalib_method = recalib_method
)
## Min KL on validation set
metrics_valid_kl_star <-
metrics_xgb_current_valid |> arrange(KL_20_true_probas) |> dplyr::slice(1)
nb_iter_kl <- metrics_valid_kl_star$nb_iter
max_depth_kl_star <- metrics_valid_kl_star$max_depth
i_max_depth_kl_star <- which(max_depth_val == max_depth_kl_star)
metrics_min_kl <-
metrics_xgb_current_test |>
filter(nb_iter == !!nb_iter_kl, max_depth == max_depth_kl_star)
ind_kl <- which(map_dbl(scores_hist_repn[[i_max_depth_kl_star]], "nb_iter") == nb_iter_kl)
scores_hist_min_kl <- scores_hist_repn[[i_max_depth_kl_star]][[ind_kl]]
plot_bp_interest(
metrics_interest = metrics_min_kl,
scores_hist_interest = scores_hist_min_kl,
label = "KL*",
recalib_method = recalib_method
)
## Mediocre ICI on validation set
identified_mici <-
mediocre_ici_xgb |> filter(scenario == !!scenario, repn == !!repn)
metrics_valid_mici_star <- metrics_xgb_current_valid |>
filter(ind == identified_mici$ind, nb_iter == identified_mici$nb_iter)
nb_iter_mici <- metrics_valid_mici_star$nb_iter
max_depth_mici_star <- metrics_valid_mici_star$max_depth
i_max_depth_mici_star <- which(max_depth_val == max_depth_mici_star)
metrics_mici <-
metrics_xgb_current_test |>
filter(nb_iter == !!nb_iter_mici, max_depth == max_depth_mici_star)
ind_mici <- which(map_dbl(scores_hist_repn[[i_max_depth_mici_star]], "nb_iter") == nb_iter_mici)
scores_hist_mici <- scores_hist_repn[[i_max_depth_mici_star]][[ind_mici]]
plot_bp_interest(
metrics_interest = metrics_mici,
scores_hist_interest = scores_hist_mici,
label = "High ICI",
recalib_method = recalib_method
)
}
}
#| fig-cap: Distribution of scores on the test set (DGP 1, 0 noise variable)
#| label: fig-xgb-bp-1-0
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 1, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 1, 10 noise variables)
#| label: fig-xgb-bp-1-10
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 2, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 1, 50 noise variables)
#| label: fig-xgb-bp-1-50
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 3, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 1, 100 noise variables)
#| label: fig-xgb-bp-1-100
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 4, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 2, 0 noise variable)
#| label: fig-xgb-bp-2-0
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 5, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 2, 10 noise variables)
#| label: fig-xgb-bp-2-10
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 6, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 2, 50 noise variables)
#| label: fig-xgb-bp-2-50
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 7, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 2, 100 noise variables)
#| label: fig-xgb-bp-2-100
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 8, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 3, 0 noise variable)
#| label: fig-xgb-bp-3-0
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 9, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 3, 10 noise variables)
#| label: fig-xgb-bp-3-10
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 10, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 3, 50 noise variables)
#| label: fig-xgb-bp-3-50
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 11, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 3, 100 noise variables)
#| label: fig-xgb-bp-3-100
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 12, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 4, 0 noise variable)
#| label: fig-xgb-bp-4-0
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 13, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 4, 10 noise variables)
#| label: fig-xgb-bp-4-10
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 14, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 4, 50 noise variables)
#| label: fig-xgb-bp-4-50
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 15, repn = 1)
#| fig-cap: Distribution of scores on the test set (DGP 4, 100 noise variables)
#| label: fig-xgb-bp-4-100
#| code-fold: true
#| fig-height: 6
#| fig-width: 14
par(mfrow = c(3,9), mar = c(4.1, 4, 3.5, 1.5))
plot_bp_xgb(scenario = 16, repn = 1)
#| code-fold: true
#| code-summary: Codes to create the figure
#| fig-cap: KL Divergence and Calibration across increasing boosting iterations
#| label: fig-kl-calib-xgb-iterations
#| fig-width: 10
#| fig-height: 8
df_plot <-
metrics_xgb_all |>
mutate(
dgp = case_when(
scenario %in% 1:4 ~ 1,
scenario %in% 5:8 ~ 2,
scenario %in% 9:12 ~ 3,
scenario %in% 13:16 ~ 4
),
dgp = factor(dgp, levels = 1:4, labels = str_c("DGP ", 1:4)),
no_noise = c(0, 10, 50, 100)[(scenario-1)%%4 + 1],
no_noise = factor(
no_noise, levels = c(no_noise),
labels = str_c(no_noise, " noise variables")
)
) |>
select(
dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth,
brier, ici, KL_20_true_probas
) |>
group_by(dgp, no_noise, scenario, recalib, ind, sample, nb_iter, max_depth) |>
summarise(
brier = mean(brier),
ici = mean(ici),
KL_20_true_probas = mean(KL_20_true_probas),
.groups = "drop"
) |>
mutate(
max_depth = factor(
max_depth,
levels = c(2, 4, 6)
)
)
formatter1000 <- function(x) x*1000
#| code-fold: true
#| code-summary: Codes to create the figure
#| fig-cap: KL Divergence and Calibration (Brier) across increasing boosting iterations (log scales)
#| label: fig-kl-calib-brier-xgb-iterations
#| fig-width: 10
#| fig-height: 8
p_brier <- ggplot(
data = df_plot |> arrange(nb_iter) |> filter(max_depth == 2),
mapping = aes(x = brier, y = KL_20_true_probas)
) +
geom_path(
mapping = aes(colour = sample, linetype = recalib),
arrow = arrow(type = "closed", ends = "last",
length = unit(0.08, "inches"))
) +
# facet_wrap(~scenario) +
ggh4x::facet_grid2(dgp~no_noise, scales = "free_y", independent = "y") +
labs(
x = latex2exp::TeX("Calibration (Brier), $\\times 10^{3}$, log scale"),
y = "KL Divergence"
) +
scale_x_log10(labels = formatter1000) + scale_y_log10() +
scale_colour_manual("Sample", values = colour_samples) +
scale_linetype_discrete("Recalibration") +
theme_paper() +
theme(legend.key.width = unit(1.5, "cm"))
ggsave(
p_brier, file = "../figs/xgb-kl-calib-brier-leaves-all.pdf",
width = 13, height = 8
)
p_brier
#| code-fold: true
#| code-summary: Codes to create the figure
#| fig-cap: KL Divergence and Calibration (ICI) across increasing boosting iterations (log scales)
#| label: fig-kl-calib-ici-xgb-iterations
#| fig-width: 10
#| fig-height: 8
p_ici <- ggplot(
data = df_plot |> arrange(nb_iter) |> filter(max_depth == 2),
mapping = aes(x = ici, y = KL_20_true_probas)
) +
geom_path(
mapping = aes(colour = sample, linetype = recalib),
arrow = arrow(type = "closed", ends = "last",
length = unit(0.08, "inches"))
) +
# facet_wrap(~scenario) +
ggh4x::facet_grid2(dgp~no_noise, scales = "free_y", independent = "y") +
labs(
x = latex2exp::TeX("Calibration (ICI), $\\times 10^{3}$, log scale"),
y = "KL Divergence"
) +
scale_x_log10(labels = formatter1000) + scale_y_log10() +
scale_colour_manual("Sample", values = colour_samples) +
scale_linetype_discrete("Recalibration") +
theme_paper() +
theme(legend.key.width = unit(1.5, "cm"))
ggsave(
p_ici, file = "../figs/xgb-kl-calib-ici-leaves-all.pdf",
width = 13, height = 8
)
p_ici
#| code-fold: true
#| code-summary: Display the R codes to produce the table
#| tbl-cap: "Performance and calibration metrics (Brier Score, Integrated Calibration Index, Kullback-Leibler Divergence) computed on the test set, on scores returned by the model (column 'None'), on scores recalibrated using Platt scaling (column 'Platt'), or Isotonic regression (coliumn 'Isotonic')"
#| label: tbl-metrics-xgb
models_interest_xgb <- models_of_interest_metrics |>
group_by(scenario, recalib, sample, result_type) |>
summarise(
AUC_lower = quantile(AUC, probs = 2.5/100),
AUC_upper = quantile(AUC, probs = 97.5/100),
AUC_sd = sd(AUC),
AUC = mean(AUC),
brier_lower = quantile(brier, probs = 2.5/100),
brier_upper = quantile(brier, probs = 97.5/100),
brier_sd = sd(brier),
brier = mean(brier),
ici_lower = quantile(ici, probs = 2.5/100),
ici_upper = quantile(ici, probs = 97.5/100),
ici_sd = sd(ici),
ici = mean(ici),
KL_20_true_probas_lower = quantile(KL_20_true_probas, probs = 2.5/100),
KL_20_true_probas_upper = quantile(KL_20_true_probas, probs = 97.5/100),
KL_20_true_probas_sd = sd(KL_20_true_probas),
KL_20_true_probas = mean(KL_20_true_probas),
quant_ratio_sd = sd(inter_quantile_10_90),
quant_ratio = mean(inter_quantile_10_90),
.groups = "drop"
) |>
mutate(
model = "xgb",
sample = str_to_lower(as.character(sample)),
dgp = case_when(
scenario %in% 1:4 ~ 1,
scenario %in% 5:8 ~ 2,
scenario %in% 9:12 ~ 3,
scenario %in% 13:16 ~ 4
),
no_noise = c(0, 10, 50, 100)[(scenario-1)%%4 + 1],
no_noise = factor(
no_noise,
levels = c(no_noise),
labels = str_c(no_noise, " noise variables")
)
)
# Sanity check
# metrics_xgb_all |> count(scenario, recalib, ind, sample, nb_iter) |>
#   filter(n != max(repns_vector))
table_models_interest_mean <-
models_interest_xgb |>
filter(sample == "test") |>
select(
dgp, no_noise, recalib, sample, result_type,
brier, ici, kl = KL_20_true_probas,
) |>
filter(
result_type %in% c("AUC*", "KL*", "High ICI", "Smallest", "Largest")
) |>
mutate(value_type = "mean")
table_models_interest_sd <-
models_interest_xgb |>
filter(sample == "test") |>
select(
dgp, no_noise, recalib, sample, result_type,
brier = brier_sd, ici = ici_sd,
kl = KL_20_true_probas_sd,
) |>
filter(
result_type %in% c("AUC*", "KL*", "High ICI", "Smallest", "Largest")
) |>
mutate(value_type = "sd")
digits <- 2
table_models_interest_mean |>
bind_rows(table_models_interest_sd) |>
pivot_longer(cols = c(brier, ici, kl)) |>
pivot_wider(names_from = "value_type", values_from = "value") |>
mutate(value = str_c(round(`mean`, digits), " (", round(`sd`, digits), ")")) |>
select(-mean, -sd, -sample) |>
pivot_wider(names_from = c(recalib, name), values_from = value) |>
knitr::kable(
align = str_c("cl", str_c(rep("c", 3*3), collapse = ""), collapse = ""),
escape = FALSE, booktabs = T, digits = 3, format = "markdown",
col.names = c(
"DGP", "Noise", "Optim.",
rep(c("BS", "ICI", "KL"), 3)
)
) |>
kableExtra::collapse_rows(columns = 1:2, valign = "top") |>
kableExtra::add_header_above(
c(" " = 3,
"None" = 3,
"Platt" = 3,
"Isotonic" = 3
)
) |>
kableExtra::scroll_box(fixed_thead = TRUE, height = "500px")
# Latex version for paper
table_models_interest_mean <-
models_interest_xgb |>
filter(sample == "test") |>
select(
dgp, no_noise, recalib, sample, result_type,
brier, ici, kl = KL_20_true_probas,
) |>
filter(
result_type %in% c("AUC*", "KL*", "High ICI")
) |>
mutate(value_type = "mean")
table_models_interest_sd <-
models_interest_xgb |>
filter(sample == "test") |>
select(
dgp, no_noise, recalib, sample, result_type,
brier = brier_sd, ici = ici_sd,
kl = KL_20_true_probas_sd,
) |>
filter(
result_type %in% c("AUC*", "KL*", "High ICI")
) |>
mutate(value_type = "sd")
digits <- 2
table_models_interest_mean |>
bind_rows(table_models_interest_sd) |>
pivot_longer(cols = c(brier, ici, kl)) |>
pivot_wider(names_from = "value_type", values_from = "value") |>
mutate(value = str_c(round(`mean`, digits), " (", round(`sd`, digits), ")")) |>
select(-mean, -sd, -sample) |>
pivot_wider(names_from = c(recalib, name), values_from = value) |>
knitr::kable(
align = str_c("cl", str_c(rep("c", 3*3), collapse = ""), collapse = ""),
escape = FALSE, booktabs = T, digits = 3, format = "latex",
col.names = c(
"DGP", "Noise", "Optim.",
rep(c("BS", "ICI", "KL"), 3)
)
) |>
kableExtra::collapse_rows(columns = 1:2, valign = "top") |>
kableExtra::add_header_above(
c(" " = 3,
"None" = 3,
"Platt" = 3,
"Isotonic" = 3
)
)
table_models_interest_mean
table_models_interest_mean$no_noise |> levels()
#| code-fold: true
#| fig-width: 12
#| fig-height: 8
#| fig-cap: Average KL divergence and ICI before and after recalibration of the estimated scores for DGP 1, for selected models.
#| label: fig-kl-vs-ici-recalib-dgp-1
table_models_interest_mean <-
table_models_interest_mean |>
mutate(
no_noise = fct_recode(no_noise, `0 noise variable` = "0 noise variables"),
dgp = str_c("DGP ", dgp)
)
initial_points <- table_models_interest_mean |>
filter(recalib == "None")
points_after_c <- initial_points |>
select(dgp, no_noise, result_type, ici, kl) |>
left_join(
table_models_interest_mean |>
filter(recalib %in% c("Platt", "Isotonic")) |>
select(dgp, no_noise, recalib, result_type, ici, kl) |>
rename(ici_end = ici, kl_end = kl),
relationship = "many-to-many" # (Platt and Isotonic)
)
points_after_c
p_kl_vs_ici_recalib <-
ggplot() +
geom_point(
data = initial_points,
mapping = aes(x = ici, y = kl, shape = result_type),
size = 2
) +
geom_segment(
data = points_after_c,
mapping = aes(
x = ici, y = kl, xend = ici_end, yend = kl_end,
colour = recalib, linetype = recalib
),
arrow = arrow(length=unit(.2, 'cm'))
) +
facet_grid(dgp~no_noise, scales = "free") +
scale_shape_manual(
NULL,
values = c(
# "Smallest" = 1,
"AUC*" = 19,
"KL*" = 15,
"High ICI" = 17
)
) +
labs(x = "ICI", y = "KL Divergence") +
scale_colour_manual("Recalibration", values = colour_recalib) +
scale_linetype_discrete("Recalibration") +
theme_paper()
ggsave(p_kl_vs_ici_recalib, file = "../figs/kl_vs_ici_recalib.pdf", width = 12, height = 8)
p_kl_vs_ici_recalib_dgp_1 <-
ggplot() +
geom_point(
data = initial_points |> filter(dgp == "DGP 1"),
mapping = aes(x = ici, y = kl, shape = result_type),
size = 2
) +
geom_segment(
data = points_after_c |> filter(dgp == "DGP 1"),
mapping = aes(
x = ici, y = kl, xend = ici_end, yend = kl_end,
colour = recalib, linetype = recalib
),
arrow = arrow(length=unit(.2, 'cm'))
) +
facet_grid(dgp~no_noise, scales = "free") +
scale_shape_manual(
NULL,
values = c(
# "Smallest" = 1,
"AUC*" = 19,
"KL*" = 15,
"High ICI" = 17
)
) +
labs(x = "ICI", y = "KL Divergence") +
scale_colour_manual("Recalibration", values = colour_recalib) +
scale_linetype_discrete("Recalibration") +
theme_paper()
ggsave(
p_kl_vs_ici_recalib_dgp_1,
file = "../figs/kl_vs_ici_recalib_dgp_1.pdf", width = 12, height = 4
)
